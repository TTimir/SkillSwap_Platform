@model SkillSwap_Platform.Models.ViewModels.ExchangeVM.ExchangeDashboardVM
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@{
    ViewData["Title"] = "Exchange Details";
    ViewData["SubTitle"] = "Manage your exchange records with clarity and ease.";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<div class="col-lg-12">
    <div class="dashboard_title_area">
        <h2>@ViewData["Title"]</h2>
        <p class="text">@ViewData["SubTitle"]</p>
    </div>
</div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="col-lg-12">
        <div class="ui-content">
            <div class="message-alart-style1">
                <div class="alert alart_style_four alert-dismissible fade show mb20" role="alert">
                    @TempData["SuccessMessage"]
                    <i class="far fa-xmark btn-close" data-bs-dismiss="alert" aria-label="Close"></i>
                </div>
            </div>
        </div>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="col-lg-12">
        <div class="ui-content">
            <div class="message-alart-style1">
                <div class="alert alart_style_three alert-dismissible fade show mb20" role="alert">
                    @TempData["ErrorMessage"]
                    <i class="far fa-xmark btn-close" data-bs-dismiss="alert" aria-label="Close"></i>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-xl-12">
        <div class="ps-widget bgc-white bdrs4 p30 mb30 overflow-hidden position-relative">
            <div class="packages_table table-responsive">
                @if (Model.ActiveExchangeItems != null && Model.ActiveExchangeItems.Count > 0)
                {
                    <table class="table-style3 table at-savesearch">
                        <thead class="t-head">
                            <tr>
                                <th scope="col">Details</th>
                                <th scope="col">Status</th>
                                <th scope="col">Last Changed By</th>
                                <th scope="col">Meeting</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="t-body">
                            @foreach (var item in Model.ActiveExchangeItems)
                            {
                                <tr>
                                    <th class="ps-0" scope="row">
                                        <div class="freelancer-style1 p-0 mb-0 box-shadow-none">
                                            <div class="d-lg-flex align-items-lg-center">
                                                <div class="thumb w60 position-relative rounded-circle mb15-md">
                                                    @{
                                                        var defaults = new[]
                                                        {
                                            Url.Content("~/template_assets/images/listings/No_Offer_img_1.jpg"),
                                            Url.Content("~/template_assets/images/listings/No_Offer_img_2.jpg")
                                            };
                                                        // use ExchangeId so it’s always the same for a given offer
                                                        int idx = item.Exchange.ExchangeId % defaults.Length;
                                                        var fallback = defaults[idx];
                                                        var imgSrc = !string.IsNullOrEmpty(item.OfferImageUrl)
                                                        ? Url.Content(item.OfferImageUrl)
                                                        : fallback;
                                                    }
                                                    <img src="@imgSrc" alt="Offer Thumbnail" class="mx-auto" style="max-width:120%" />
                                                </div>
                                                <div class="details ml15 ml0-md mb15-md">
                                                    <small class="text-muted">@item.Category</small>
                                                    <h5 class="title mb-2">
                                                        <a href="@Url.Action("Details", "ExchangeDashboard", new { id = item.Exchange.ExchangeId })">
                                                            @item.OfferTitle
                                                        </a>
                                                    </h5>
                                                    <p class="mb-0 fz14 list-inline-item mb5-sm" title="Token Cost"><i class="flaticon-income fz16 vam text-thm2 me-1 bdrl1 pl15 pl0-xs bdrn-xs"></i> @item.Token Tokens</p>
                                                    <p class="mb-0 fz14 list-inline-item mb5-sm pe-1" title="Exchange initiated Date"><i class="flaticon-30-days fz16 vam text-thm2 me-1 bdrl1 pl15 pl0-xs bdrn-xs"></i> @item.ExchangeStartDate.ToString("dd MMMM, yyyy")</p>
                                                    <p class="mb-0 fz14 list-inline-item mb5-sm pe-1" title="Mode Of Learning"><i class="flaticon-place fz16 vam text-thm2 me-1"></i> @item.ExchangeMode</p>
                                                </div>
                                            </div>
                                        </div>
                                    </th>
                                    <td>
                                        <h5 class="@(item.Status == "Finalized"
                                                    ? "pending-style style1"
                                                    : item.Status == "Completed"
                                                        ? "pending-style style2"
                                                        : item.Status == "Declined"
                                                            ? "pending-style style3"
                                                            : "")">
                                            @item.Status
                                        </h5>
                                    </td>
                                    <td>
                                        <div class="d-flex">
                                            @if (item.LastStatusChangedByName != null)
                                            {
                                                @("@")

                                                @item.LastStatusChangedByName
                                            }
                                            else
                                            {
                                                <span>N/A</span>
                                            }
                                        </div>
                                    </td>
                                    <td class="vam">
                                        @if (!string.IsNullOrEmpty(item.ExchangeMode) &&
                                       item.ExchangeMode.Equals("online", StringComparison.OrdinalIgnoreCase))
                                        {
                                            if (item.IsOnlineMeetingCompleted)
                                            {
                                                @if (item.CanLaunchMeeting)
                                                {
                                                    <a href="@Url.Action("Authorize", "GoogleAuth", new { exchangeId = item.Exchange.ExchangeId, OtherUserId = item.OtherUserId })"
                                                       class="ud-btn btn-light-thm me-4"
                                                       data-bs-toggle="tooltip" data-bs-placement="top"
                                                       title="Launch Online Meet (Session @(item.RecentMeetingLaunchCount + 1))">
                                                        Online Meet (S# @(item.RecentMeetingLaunchCount + 1)) <i class="fal fa-arrow-right-long"></i>
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span class="font-weight-bold text-danger"
                                                          data-bs-toggle="tooltip" data-bs-placement="top"
                                                          title="Too many online meetings have been launched. Please wait for an hour.">
                                                        <i class="fal fa-exclamation-triangle"></i> Online Meeting Limit Reached
                                                    </span>
                                                }
                                            }
                                            else
                                            {
                                                <!-- Only show the online meet button if no meeting has yet been completed -->
                                                @if (item.CanLaunchMeeting)
                                                {
                                                    <a href="@Url.Action("Authorize", "GoogleAuth", new { exchangeId = item.Exchange.ExchangeId, OtherUserId = item.OtherUserId })"
                                                       class="ud-btn btn-light-thm me-4"
                                                       data-bs-toggle="tooltip" data-bs-placement="top"
                                                       title="Launch Online Meet (Session @(item.RecentMeetingLaunchCount + 1))">
                                                        Online Meet (S# @(item.RecentMeetingLaunchCount + 1)) <i class="fal fa-arrow-right-long"></i>
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span class="font-weight-bold text-danger"
                                                          data-bs-toggle="tooltip" data-bs-placement="top"
                                                          title="Too many online meetings have been launched. Please wait for an hour.">
                                                        <i class="fal fa-exclamation-triangle"></i> Online Meeting Limit Reached
                                                    </span>
                                                }
                                            }
                                        }
                                        else if (!string.IsNullOrEmpty(item.ExchangeMode) &&
                                        item.ExchangeMode.Equals("in-person", StringComparison.OrdinalIgnoreCase))
                                        {
                                            // For in-person mode, display a different button.
                                            <a href="@Url.Action("ScheduleInPerson", "ExchangeInPerson", new { exchangeId = item.Exchange.ExchangeId, OtherUserId = item.OtherUserId })" class="ud-btn btn-light-thm me-4"
                                               data-bs-toggle="tooltip" data-bs-placement="top" title="Schedule In-Person Meet">
                                                In-Person Meet <i class="fal fa-arrow-right-long"></i>
                                            </a>

                                            @if (!string.IsNullOrWhiteSpace(item.ExchangeMode) &&
                                           item.ExchangeMode.ToLower().Contains("in-person") &&
                                           !item.IsMeetingEnded &&
                                           item.MeetingScheduledDateTime.HasValue && item.InpersonMeetingDurationMinutes.HasValue)
                                            {
                                                // Calculate the expected meeting end time.
                                                DateTime scheduledTime = item.MeetingScheduledDateTime.Value; // assume stored in UTC
                                                int durationMinutes = item.InpersonMeetingDurationMinutes.Value;
                                                DateTime meetingEndTime = scheduledTime.AddMinutes(durationMinutes);

                                                // Define a threshold such as 10 minutes before the expected end.
                                                DateTime buttonThreshold = meetingEndTime.AddMinutes(-10);

                                                // Check if the current time is at or after this threshold.
                                                if (DateTime.UtcNow >= buttonThreshold)
                                                {
                                                    <a href="@Url.Action("EnterEndMeetingDetails", "ExchangeInPerson", new { exchangeId = item.Exchange.ExchangeId })"
                                                       class="ud-btn btn-thm2 me-4"
                                                       data-bs-toggle="tooltip" data-bs-placement="top" title="Enter End Meeting Details">
                                                        Enter Meeting End Details <i class="fal fa-arrow-right-long"></i>
                                                    </a>
                                                }
                                            }
                                        }
                                    </td>
                                    <td>
                                        @if ((item.ExchangeMode?.Equals("online", StringComparison.OrdinalIgnoreCase) == true && item.IsOnlineMeetingCompleted)
                                       || (item.ExchangeMode?.Equals("in-person", StringComparison.OrdinalIgnoreCase) == true && item.IsMeetingEnded))
                                        {
                                            <div class="d-flex flex-column flex-md-row">
                                                <form action="@Url.Action("MarkExchangeCompleted", "ExchangeDashboard")" method="post" style="display:inline;">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="exchangeId" value="@item.Exchange.ExchangeId" />
                                                    <button type="submit" class="ud-btn btn-thm2 me-4"
                                                            data-bs-toggle="tooltip" data-bs-placement="top"
                                                            title="Mark this exchange as completed">
                                                        Mark Exchange as Done <i class="fal fa-check"></i>
                                                    </button>
                                                </form>
                                                <form asp-action="CancelExchange" asp-controller="ExchangeDashboard" method="post">
                                                    @Html.AntiForgeryToken()
                                                    <input type="hidden" name="exchangeId" value="@item.Exchange.ExchangeId" />
                                                    <button type="submit" class="ud-btn btn-danger" title="Cancel this exchange">
                                                        Cancel Exchange <i class="fal fa-times"></i>
                                                    </button>
                                                </form>
                                            </div>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (Model.CurrentPage > 1)
                    {
                        <div class="mbp_pagination text-center mt30">
                            <ul class="page_navigation">
                                @if (Model.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage - 1 })">
                                            <span class="fas fa-angle-left"></span>
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link"><span class="fas fa-angle-left"></span></span>
                                    </li>
                                }

                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    if (i == Model.CurrentPage)
                                    {
                                        <li class="page-item active" aria-current="page">
                                            <span class="page-link">@i</span>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                        </li>
                                    }
                                }

                                @if (Model.CurrentPage < Model.TotalPages)
                                {
                                    <li class="page-item" style="border: 1px solid #E9E9E9;">
                                        <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage + 1 })">
                                            <span class="fas fa-angle-right"></span>
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled" style="border: 1px solid #E9E9E9;">
                                        <span class="page-link"><span class="fas fa-angle-right"></span></span>
                                    </li>
                                }
                            </ul>
                            <p class="mt10 mb-0 pagination_page_count text-center">
                                Page @Model.CurrentPage of @Model.TotalPages
                            </p>
                        </div>
                    }
                }
                else
                {
                    <p>No exchange initiated yet.</p>
                }
            </div>
        </div>
    </div>
</div>
</div>
