@model SkillSwap_Platform.Models.ViewModels.ExchangeVM.ExchangeDashboardVM
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@using Microsoft.Extensions.Caching.Memory
@inject IMemoryCache Cache

@{
    ViewData["Title"] = "Exchange Details";
    ViewData["SubTitle"] = "Manage your exchange records with clarity and ease.";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<div class="col-lg-12">
    <div class="dashboard_title_area">
        <h2>@ViewData["Title"]</h2>
        <p class="text">@ViewData["SubTitle"]</p>
    </div>
</div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="col-lg-12">
        <div class="ui-content">
            <div class="message-alart-style1">
                <div class="alert alart_style_four alert-dismissible fade show mb20" role="alert">
                    @TempData["SuccessMessage"]
                    <i class="far fa-xmark btn-close" data-bs-dismiss="alert" aria-label="Close"></i>
                </div>
            </div>
        </div>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="col-lg-12">
        <div class="ui-content">
            <div class="message-alart-style1">
                <div class="alert alart_style_three alert-dismissible fade show mb20" role="alert">
                    @TempData["ErrorMessage"]
                    <i class="far fa-xmark btn-close" data-bs-dismiss="alert" aria-label="Close"></i>
                </div>
            </div>
        </div>
    </div>
}

<div class="row mb-4">
    <div class="col-12">
        <div class="alert alert-info">
            <strong>Note for online meets:</strong><br />
            <strong>Step 1:</strong> The host must click “Launch Online Meet” below and stay connected first.<br />
            <strong>Step 2:</strong> Then your partner can click the same link and will be admitted immediately.
        </div>
        <div class="alert alert-info">
            <strong>Note for in-person meetings:</strong><br />
            <strong>Step 1:</strong> Click “Schedule In-Person Meet” below to pick date, time, and location.<br />
            <strong>Step 2:</strong> Meet in person at the scheduled slot.<br />
            <strong>Step 3:</strong> After you finish, click “Enter Meeting End Details” to confirm completion.
        </div>
    </div>
</div>
<div class="row">
    <div class="col-xl-12">
        <div class="ps-widget bgc-white bdrs4 p30 mb30 overflow-hidden position-relative">
            <div class="packages_table table-responsive">
                @if (Model.ActiveExchangeItems != null && Model.ActiveExchangeItems.Count > 0)
                {
                    <table class="table-style3 table at-savesearch">
                        <thead class="t-head">
                            <tr>
                                <th scope="col">Details</th>
                                <th scope="col">Status</th>
                                <th scope="col">Last Changed By</th>
                                <th scope="col">Meeting</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="t-body">
                            @foreach (var item in Model.ActiveExchangeItems)
                            {
                                @if (item.OfferIsDeleted)
                                {
                                    <tr>
                                        <td colspan="5">
                                            <div class="alert alert-warning mb-2">
                                                <strong>Notice:</strong>
                                                The offer <em>“@item.OfferTitle”</em> was removed by our moderator team.
                                                If you haven’t yet completed or closed this exchange, please
                                                <a href="mailto:swapoorg360@gmail.com">contact our support team</a>.
                                                Otherwise, you can manage your remaining listings in
                                                <a href="@Url.Action("Index", "ExchangeDashboard")">My Active Exchanges</a>.
                                            </div>
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <th class="ps-0" scope="row">
                                            <div class="freelancer-style1 p-0 mb-0 box-shadow-none">
                                                <div class="d-lg-flex align-items-lg-center">
                                                    <div class="thumb w60 position-relative rounded-circle mb15-md">
                                                        @{
                                                            var defaults = new[]
                                                            {
                                            Url.Content("~/template_assets/images/listings/No_Offer_img_1.jpg"),
                                            Url.Content("~/template_assets/images/listings/No_Offer_img_2.jpg")
                                            };
                                                            // use ExchangeId so it’s always the same for a given offer
                                                            int idx = item.Exchange.ExchangeId % defaults.Length;
                                                            var fallback = defaults[idx];
                                                            var imgSrc = !string.IsNullOrEmpty(item.OfferImageUrl)
                                                            ? Url.Content(item.OfferImageUrl)
                                                            : fallback;
                                                        }
                                                        <img src="@imgSrc" alt="Offer Thumbnail" class="mx-auto" style="max-width:120%" />
                                                    </div>
                                                    <div class="details ml15 ml0-md mb15-md">
                                                        <small class="text-muted">@item.Category</small>
                                                        <h5 class="title mb-2">
                                                            <a href="@Url.Action("Details", "ExchangeDashboard", new { id = item.Exchange.ExchangeId })">
                                                                @item.OfferTitle
                                                            </a>
                                                        </h5>
                                                        <p class="mb-0 fz14 list-inline-item mb5-sm" title="Token Cost"><i class="flaticon-income fz16 vam text-thm2 me-1 bdrl1 pl15 pl0-xs bdrn-xs"></i> @item.Token Tokens</p>
                                                        <p class="mb-0 fz14 list-inline-item mb5-sm pe-1" title="Exchange initiated Date"><i class="flaticon-30-days fz16 vam text-thm2 me-1 bdrl1 pl15 pl0-xs bdrn-xs"></i> @item.ExchangeStartDate.ToLocalTime().ToString("dd MMMM, yyyy")</p>
                                                        <p class="mb-0 fz14 list-inline-item mb5-sm pe-1" title="Mode Of Learning"><i class="flaticon-place fz16 vam text-thm2 me-1"></i> @item.ExchangeMode</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </th>
                                        <td>
                                            <h5 class="@(item.Status == "Finalized"
                                                    ? "pending-style style1"
                                                    : item.Status == "Completed"
                                                        ? "pending-style style2"
                                                        : item.Status == "Declined"
                                                            ? "pending-style style3"
                                                            : "")">
                                                @item.Status
                                            </h5>
                                        </td>
                                        <td>
                                            <div class="d-flex">
                                                @if (item.LastStatusChangedByName != null)
                                                {
                                                    @("@")

                                                    @item.LastStatusChangedByName
                                                }
                                                else
                                                {
                                                    <span>N/A</span>
                                                }
                                            </div>
                                        </td>
                                        <td class="vam">
                                            @if (!string.IsNullOrEmpty(item.ExchangeMode) &&
                                           item.ExchangeMode.Equals("online", StringComparison.OrdinalIgnoreCase))
                                            {
                                                if (item.IsOnlineMeetingCompleted)
                                                {
                                                    @if (item.CanLaunchMeeting)
                                                    {
                                                        <a asp-controller="GoogleCalendar" asp-action="AuthorizeMeet" asp-route-exchangeId="@item.Exchange.ExchangeId" asp-route-otherUserId="@item.OtherUserId"
                                                           class="ud-btn btn-light-thm"
                                                           data-bs-toggle="tooltip" data-bs-placement="bottom"
                                                           title="Launch Online Meet (Session @(item.RecentMeetingLaunchCount + 1))">
                                                            Online Meet (S# @(item.RecentMeetingLaunchCount + 1)) <i class="fal fa-arrow-right-long"></i>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <span class="font-weight-bold text-danger"
                                                              data-bs-toggle="tooltip" data-bs-placement="top"
                                                              title="Too many online meetings have been launched. Please wait for an hour.">
                                                            <i class="fal fa-exclamation-triangle"></i> Online Meeting Limit Reached
                                                        </span>
                                                    }
                                                }
                                                else
                                                {
                                                    <!-- Only show the online meet button if no meeting has yet been completed -->
                                                    @if (item.CanLaunchMeeting)
                                                    {
                                                        <a asp-controller="GoogleCalendar" asp-action="CreateEvent" asp-route-exchangeId="@item.Exchange.ExchangeId" asp-route-otherUserId="@item.OtherUserId"
                                                           class="ud-btn btn-light-thm me-4"
                                                           data-bs-toggle="tooltip" data-bs-placement="top"
                                                           title="Launch Online Meet (Session @(item.RecentMeetingLaunchCount + 1))">
                                                            Online Meet (S# @(item.RecentMeetingLaunchCount + 1)) <i class="fal fa-arrow-right-long"></i>
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <span class="font-weight-bold text-danger"
                                                              data-bs-toggle="tooltip" data-bs-placement="top"
                                                              title="Too many online meetings have been launched. Please wait for an hour.">
                                                            <i class="fal fa-exclamation-triangle"></i> Online Meeting Limit Reached
                                                        </span>
                                                    }
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(item.ExchangeMode) &&
                                            item.ExchangeMode.Equals("in-person", StringComparison.OrdinalIgnoreCase))
                                            {
                                                // For in-person mode, display a different button.
                                                <a href="@Url.Action("ScheduleInPerson", "ExchangeInPerson", new { exchangeId = item.Exchange.ExchangeId, OtherUserId = item.OtherUserId })" class="ud-btn btn-light-thm"
                                                   data-bs-toggle="tooltip" data-bs-placement="top" title="Schedule In-Person Meet">
                                                    In-Person Meet <i class="fal fa-arrow-right-long"></i>
                                                </a>

                                                @if (item.InPersonOwnerVerified && item.InPersonOtherPartyVerified && !item.IsMeetingEnded)
                                                {

                                                    <a href="@Url.Action("EnterEndMeetingDetails", "ExchangeInPerson", new { exchangeId = item.Exchange.ExchangeId })"
                                                       class="ud-btn btn-thm2 me-4"
                                                       data-bs-toggle="tooltip" data-bs-placement="bottom" title="Enter The End Meeting Details">
                                                        Meeting Details <i class="fal fa-arrow-right-long"></i>
                                                    </a>
                                                }

                                                // show only in the ~5-minute window after the "30 min-before" reminder fires
                                                bool showSnooze = false;
                                                if (item.MeetingScheduledDateTime.HasValue)
                                                {
                                                    var leadUtc = item.MeetingScheduledDateTime.Value.ToUniversalTime().AddMinutes(-30);
                                                    var nowUtc = DateTime.UtcNow;
                                                    var windowEnd = leadUtc.AddMinutes(5);
                                                    bool inWindow = nowUtc >= leadUtc && nowUtc <= windowEnd;

                                                    bool snoozed = Cache.TryGetValue($"snooze-{item.Exchange.ExchangeId}", out _);
                                                    showSnooze = inWindow && !snoozed && !item.IsMeetingEnded;
                                                }

                                                @if (showSnooze)
                                                {
                                                    <a asp-action="SnoozeReminder"
                                                       asp-route-exchangeId="@item.Exchange.ExchangeId"
                                                       class="ud-btn btn-outline-secondary mb10"
                                                       title="Pause all reminders for 24 hours">
                                                        💤 Snooze reminders for 24 h
                                                    </a>
                                                }
                                            }
                                        </td>
                                        @{
                                            var currentUserId = int.Parse(User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier).Value);
                                            bool iAskedCancel = item.StatusChangeBy == currentUserId;
                                            bool partnerAsked = item.StatusChangeBy != null && item.StatusChangeBy != currentUserId;
                                            var isPendingCancel = item.Exchange.Status.Equals(
                                            "Cancellation Requested", StringComparison.OrdinalIgnoreCase);

                                            bool isOfferOwner = currentUserId == item.Exchange.OfferOwnerId;
                                            bool hasConfirmed = isOfferOwner
                                            ? item.Exchange.IsCompletedByOfferOwner
                                            : item.Exchange.IsCompletedByOtherParty;
                                            bool bothConfirmed = item.Exchange.IsCompletedByOfferOwner && item.Exchange.IsCompletedByOtherParty;

                                            // your original “meeting completed” test:
                                            bool meetingDone = (item.ExchangeMode?.Equals("online", StringComparison.OrdinalIgnoreCase) == true
                                            && item.IsOnlineMeetingCompleted)
                                            || (item.ExchangeMode?.Equals("in-person", StringComparison.OrdinalIgnoreCase) == true
                                            && item.IsMeetingEnded);
                                        }
                                        <td>
                                            @if (isPendingCancel)
                                            {
                                                <span class="badge bg-warning">
                                                    Cancellation requested, waiting for partner…
                                                </span>
                                            }
                                            else
                                            {
                                                @* 2) Otherwise, show your normal “I’m Done” / “Waiting for partner” / “Completed” flow *@
                                                @if (!hasConfirmed)
                                                {
                                                    <form asp-action="MarkExchangeCompleted"
                                                          asp-controller="ExchangeDashboard"
                                                          method="post"
                                                          style="display:inline;">
                                                        @Html.AntiForgeryToken()
                                                        <input type="hidden" name="exchangeId" value="@item.Exchange.ExchangeId" />
                                                        <button type="submit"
                                                                class="ud-btn btn-thm2 mb10"
                                                                data-bs-toggle="tooltip"
                                                                data-bs-placement="top"
                                                                title="Mark this exchange as completed">
                                                            I’m Done
                                                        </button>
                                                    </form>
                                                }
                                                else if (!bothConfirmed)
                                                {
                                                    <span class="text-info">
                                                        Waiting for the other partner to confirm…
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-success">
                                                        ✅ Completed
                                                    </span>
                                                }

                                                @* 3) And still allow them to “No, Cancel” if they change their mind *@
                                                <button type="button"
                                                        class="ud-btn btn-danger btn-request-cancel"
                                                        data-exchange-id="@item.Exchange.ExchangeId">
                                                    No, Cancel
                                                </button>
                                            }

                                            @if (partnerAsked)
                                            {
                                                <div class="mt-2">
                                                    <p><strong>Partner’s reason:</strong><br />@item.StatusChangeReason</p>
                                                    <div class="d-flex">
                                                        <form asp-action="CancelExchange" method="post" class="me-2">
                                                            @Html.AntiForgeryToken()
                                                            <input type="hidden" name="ExchangeId" value="@item.Exchange.ExchangeId" />
                                                            <button type="submit" class="ud-btn btn-thm">Approve</button>
                                                        </form>
                                                        <form asp-action="DenyCancellation" method="post">
                                                            @Html.AntiForgeryToken()
                                                            <input type="hidden" name="ExchangeId" value="@item.Exchange.ExchangeId" />
                                                            <button type="submit" class="ud-btn btn-light-thm" style="border:0">
                                                                Deny
                                                            </button>
                                                        </form>
                                                    </div>
                                                </div>
                                            }
                                        </td>
                                    </tr>
                                }

                                @*–– inside your foreach, after </tr> ––*@
                                <div class="modal fade" id="cancelModal-@item.Exchange.ExchangeId" tabindex="-1">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <form asp-action="CancelExchange" method="post">
                                                @Html.AntiForgeryToken()

                                                @* manually pass ExchangeId *@
                                                <input type="hidden" name="ExchangeId" value="@item.Exchange.ExchangeId" />

                                                <div class="modal-header">
                                                    <h5 class="modal-title">Request Cancellation for #@item.Exchange.ExchangeId</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                                </div>

                                                <div class="modal-body">
                                                    <div class="mb-3">
                                                        <label for="reason-@item.Exchange.ExchangeId" class="form-label">
                                                            Why are you cancelling?
                                                        </label>
                                                        @* manually name the textarea Reason *@
                                                        <textarea id="reason-@item.Exchange.ExchangeId"
                                                                  name="Reason"
                                                                  rows="4"
                                                                  placeholder="Please explain why you need to cancel…" required></textarea>
                                                        @* If you’d like client-side validation messages you can render:
               <span asp-validation-for="Reason" class="text-danger"></span>
               but for that you’ll need to inject the ValidationScripts partial and enable client validation. *@
                                                    </div>
                                                </div>

                                                <div class="modal-footer">
                                                    <button type="button" class="ud-btn btn-light-thm"
                                                            data-bs-dismiss="modal" style="border:0;">
                                                        Back
                                                    </button>
                                                    <button type="submit" class="ud-btn btn-thm">
                                                        Submit Cancellation Request
                                                    </button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>
                                </div>

                            }
                        </tbody>
                    </table>
                    @if (Model.CurrentPage > 1)
                    {
                        <div class="mbp_pagination text-center mt30">
                            <ul class="page_navigation">
                                @if (Model.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage - 1 })">
                                            <span class="fas fa-angle-left"></span>
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link"><span class="fas fa-angle-left"></span></span>
                                    </li>
                                }

                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    if (i == Model.CurrentPage)
                                    {
                                        <li class="page-item active" aria-current="page">
                                            <span class="page-link">@i</span>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                        </li>
                                    }
                                }

                                @if (Model.CurrentPage < Model.TotalPages)
                                {
                                    <li class="page-item" style="border: 1px solid #E9E9E9;">
                                        <a class="page-link" href="@Url.Action("Index", new { page = Model.CurrentPage + 1 })">
                                            <span class="fas fa-angle-right"></span>
                                        </a>
                                    </li>
                                }
                                else
                                {
                                    <li class="page-item disabled" style="border: 1px solid #E9E9E9;">
                                        <span class="page-link"><span class="fas fa-angle-right"></span></span>
                                    </li>
                                }
                            </ul>
                            <p class="mt10 mb-0 pagination_page_count text-center">
                                Page @Model.CurrentPage of @Model.TotalPages
                            </p>
                        </div>
                    }
                }
                else
                {
                    <p>No exchange initiated yet.</p>
                }
            </div>
        </div>
    </div>
</div>
</div>

@section DynamicScript {
    <script>
        $(document).on('click', '.btn-request-cancel', function(){
          var id = $(this).data('exchange-id');
          $('#cancelModal-' + id).modal('show');
        });
    </script>
}