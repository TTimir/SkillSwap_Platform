@using Humanizer
@using SkillSwap_Platform.Models.ViewModels
@model SkillSwap_Platform.Models.ViewModels.MessagesVM.ConversationVM
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthZ

@{
    ViewData["Title"] = "Conversations";
    ViewData["SubTitle"] = "Creating meaningful connections, one message at a time.";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";

    // Retrieve current user ID from claims.
    var userIdClaim = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    int currentUserId = 0;
    if (!string.IsNullOrEmpty(userIdClaim))
    {
        int.TryParse(userIdClaim, out currentUserId);
    }
    var contractDetails = Model.Messages.FirstOrDefault(m => m.ContractDetails != null)?.ContractDetails;
}

<div class="col-lg-12">
    <div class="dashboard_title_area">
        <h2>@ViewData["Title"]</h2>
        <p class="text">@ViewData["SubTitle"]</p>
    </div>
</div>
</div>
@if (TempData["SuccessMessage"] != null)
{
    <div class="col-lg-12">
        <div class="ui-content">
            <div class="message-alart-style1">
                <div class="alert alart_style_four alert-dismissible fade show mb20" role="alert">
                    @TempData["SuccessMessage"]
                    <i class="far fa-xmark btn-close" data-bs-dismiss="alert" aria-label="Close"></i>
                </div>
            </div>
        </div>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="col-lg-12">
        <div class="ui-content">
            <div class="message-alart-style1">
                <div class="alert alart_style_three alert-dismissible fade show mb20" role="alert">
                    @TempData["ErrorMessage"]
                    <i class="far fa-xmark btn-close" data-bs-dismiss="alert" aria-label="Close"></i>
                </div>
            </div>
        </div>
    </div>
}
<div class="row mb40">
    <!-- Left Sidebar: Chat Contacts -->
    <div class="col-lg-6 col-xl-5 col-xxl-4">
        <div class="message_container">
            <div class="inbox_user_list">
                <div class="iu_heading pr35">
                    <div class="chat_user_search">
                        <form class="d-flex align-items-center" method="get" action="@Url.Action("Conversation", "Messaging")">
                            <button class="btn" type="submit"><span class="far fa-magnifying-glass"></span></button>
                            <input class="form-control" type="search" name="searchTerm" value"@(Model.SearchTerm)" placeholder=" by name or designation" aria-label="Search" />
                        </form>
                    </div>
                </div>
                <div class="chat-member-list pr20">
                    @foreach (var contact in Model.ChatMembers)
                    {
                        <div class="list-item pt5">
                            <a href="@Url.Action("Conversation", "Messaging", new { otherUserId = contact.UserID })">
                                <div class="d-flex align-items-center position-relative">
                                    <vc:online-indicator user-id="@contact.UserID" />
                                    <img class="img-fluid float-start rounded-circle mr10 con-profile-avatar" src="@(!string.IsNullOrEmpty(contact.ProfileImage) ? Url.Content(contact.ProfileImage) : Url.Content("~/template_assets/images/No_Profile_img.png"))" alt="@contact.UserName" />
                                    <div class="d-sm-flex">
                                        <div class="d-inline-block">
                                            <div class="fz15 fw500 dark-color ff-heading mb-0">@contact.UserName</div>
                                            <p class="preview">@contact.Designation</p>
                                        </div>
                                        <div class="iul_notific">
                                            @{
                                                // Explicitly specify that it’s local time
                                                var dt = DateTime.Parse(contact.LastMessageTime).ToLocalTime();
                                            }
                                            <small>@dt.Humanize()</small>
                                            @if (contact.UnreadCount > 0)
                                            {
                                                <div class="m_notif">@contact.UnreadCount</div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Right Side: Conversation Messages -->
    <div class="col-lg-6 col-xl-7 col-xxl-8">
        <div class="message_container mt30-md">
            <div class="user_heading px-0 mx30">
                @if (Model.OtherUserId == 0)
                {
                    <!-- Placeholder for no conversation selected -->
                    <div class="no-chat-placeholder" style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 400px; border: 1px dashed #ccc;">
                        <img src="~/template_assets/images/inbox/No-Message_Open.svg" style="border-radius: 0; max-width:50%; margin-bottom: 20px;" />
                        <p style="text-align: center;">Select a conversation from your inbox or profile to start chatting, your connections are just a click away.</p>
                    </div>
                }
                else
                {
                    <div class="user_heading px-0 mx30">
                        <div class="wrap">
                            <img class="img-fluid mr10 rounded-circle con-profile-avatar" src="@Model.OtherUserProfileImage" alt="Profile" />
                            <div class="meta d-sm-flex justify-content-sm-between align-items-center">
                                <div class="authors" style="padding-top:5px;">
                                    <h6 class="name mb-0">@Model.OtherUserName</h6>
                                    <p class="preview">@(Model.OtherUserIsOnline ? "Online" : "Offline")</p>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-link p-0" type="button" id="conversationOptionsBtn" data-bs-toggle="dropdown" aria-expanded="false" title="Options">
                                        <i class="fa fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="conversationOptionsBtn">
                                        <li>
                                            @if (Model.LatestActiveOffer != null)
                                            {
                                                <div class="dropdown-item d-flex flex-column">
                                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                                        Active: <strong class="line-clamp2">@Model.LatestActiveOffer.Title</strong>
                                                    </div>
                                                    <a href="@Url.Content(Model.LatestActiveOffer.CurrentStagePdfUrl)"
                                                       class="btn btn-sm btn-outline-primary mb-2"
                                                       target="_blank">
                                                        <i class="fa fa-file-pdf"></i> View Stage PDF
                                                    </a>
                                                    <small class="text-muted">
                                                        Agreement ID: <code>@Model.LatestActiveOffer.ContractUniqueId</code> —
                                                        Status: <em>
                                                            <span class="badge
                                                                @(Model.LatestActiveOffer.Status=="Completed" ? "bg-success"
                                                                : Model.LatestActiveOffer.Status=="In Progress" ? "bg-warning"
                                                                : "bg-secondary")">
                                                                @Model.LatestActiveOffer.Status
                                                            </span>
                                                        </em>
                                                    </small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="dropdown-item text-muted">
                                                    <i class="fa fa-exchange-alt"></i> No active offers
                                                </span>
                                            }
                                        </li>
                                        <li>
                                            <a class="dropdown-item"
                                               data-bs-toggle="collapse"
                                               href="#swapOffersCollapse"
                                               role="button"
                                               aria-expanded="false"
                                               aria-controls="swapOffersCollapse">
                                                <i class="fa fa-exchange-alt"></i> Swap Offers
                                            </a>
                                        </li>
                                        <li class="collapse" id="swapOffersCollapse">
                                            <div class="px-3 py-2">
                                                @if (Model.SwapOffers.Any())
                                                {
                                                    <small class="text-muted d-block mb-2">
                                                        Showing latest @Model.SwapOffers.Count of @Model.TotalSwapOffersCount swap offers
                                                    </small>
                                                    <ul class="list-unstyled mb-0">
                                                        @foreach (var offer in Model.SwapOffers)
                                                        {
                                                            <li class="d-flex justify-content-between align-items-center mb-2">
                                                                <div>
                                                                    <strong class="line-clamp2">@offer.Title</strong><br />
                                                                    <small class="text-muted">@offer.LatestDate.ToString("MMMM dd, yyyy")</small>
                                                                </div>
                                                                <span class="badge
                                                                    @(offer.LatestStatus=="Accepted" ? "bg-success"
                                                                    : offer.LatestStatus=="Declined"   ? "bg-danger"
                                                                    : "bg-warning")">
                                                                    @offer.LatestStatus
                                                                </span>
                                                            </li>
                                                            <hr class="opacity-100 mt-0">
                                                        }
                                                    </ul>
                                                }
                                                else
                                                {
                                                    <div class="text-center text-muted">No swap offers yet.</div>
                                                    <hr class="opacity-100 mt-0">
                                                }
                                            </div>
                                        </li>
                                        @{
                                            // synchronously evaluate once per render
                                            var ProMember = (await AuthZ.AuthorizeAsync(User, "ProPlan")).Succeeded;
                                        }
                                        @if (ProMember)
                                        {
                                            <li>
                                                <a class="dropdown-item" href="@Url.Action("Index", "GoogleCalendar")" title="Schedule a meeting on your calendar">
                                                    <i class="fa fa-calendar"></i> Calendar Schedule
                                                </a>
                                            </li>
                                        }
                                        <li>
                                            <form asp-action="DeleteConversation"
                                                  asp-controller="Messaging"
                                                  method="post"
                                                  onsubmit="return confirm('Are you sure you want to delete your conversation with @Model.OtherUserName?');" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="otherUserId" value="@Model.OtherUserId" />
                                                <button type="submit" class="dropdown-item text-danger">
                                                    <i class="fa fa-trash"></i> Delete Conversation
                                                </button>
                                            </form>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="inbox_chatting_box">
                        <ul id="chatContainer" class="chatting_content">
                            @foreach (var msg in Model.Messages)
                            {
                                // Now you're looping over MessageItemVM directly.
                                var currentSentTime = msg.SentDate.ToLocalTime().ToString("g");
                                bool showHeader = false;

                                msg.ShowHeader = showHeader;

                                @await Html.PartialAsync("_MessageItem", msg)
                            }
                        </ul>
                    </div>

                    <!-- Place the Reply Preview Container here, above the message input -->
                    <div id="replyPreviewContainer" style="display:none; border: 1px solid #ddd; padding: 5px; margin-bottom: 72px; background-color: #f9f9f9;">
                        <span id="replyPreviewDisplay" style="font-style: italic;"></span>
                        <span class="icon-cancel" style="cursor: pointer; margin-left: 10px;">&times;</span>
                    </div>

                    @*=============== Region: Offer Preview Window ===============*@
                    @if (ViewBag.OfferDetails != null)
                    {
                        var offer = (SkillSwap_Platform.Models.ViewModels.OfferDisplayVM)ViewBag.OfferDetails;
                        <div class="card bg-light-subtle mt-4" id="offerPreviewWindow" style="margin-bottom: 60px;">
                            @{
                                // 1) Use the VM’s PortfolioUrls (already a List<string>)
                                var portfolioImages = offer.PortfolioUrls ?? new List<string>();

                                // 2) Define two fallback images
                                var defaultImages = new[]
                                {
                    Url.Content("~/template_assets/images/listings/No_Offer_img_1.jpg"),
                    Url.Content("~/template_assets/images/listings/No_Offer_img_2.jpg")
                    };

                                // 3) Pick one fallback deterministically by OfferId
                                int idx = offer.OfferId % defaultImages.Length;
                                var fallbackImage = defaultImages[idx];

                                // 4) Final src = first portfolio image or fallback
                                string imgSrc = portfolioImages.Any()
                                ? Url.Content(portfolioImages.First())
                                : fallbackImage;
                            }
                            <img src="@imgSrc"
                                 class="card-img-top" alt="Offer Thumbnail" style="border-radius:14px;max-width:25%">
                            <div class="card-body">
                                <div class="text-section">
                                    <h5 class="card-title line-clamp2 fw-bold">@offer.Title</h5>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5 class="card-title mb-0 mr15"><i class="flaticon-sandclock me-1"></i>@offer.TimeCommitmentDays Days</h5>
                                        <h5 class="card-title mb-0"><i class="flaticon-recycle me-1"></i>@offer.AssistanceRounds Assistance</h5>
                                    </div>
                                    <div class="skills-section mt-2">
                                        @if (offer.WillingSkills != null && offer.WillingSkills.Any())
                                        {
                                            <div>
                                                <strong>Want to learn about: </strong>@string.Join(", ", offer.WillingSkills)
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="cta-section">
                                    <div>@offer.TokenCost Token</div>
                                    <a href="javascript:void(0);" id="btnRemoveOfferPreview">
                                        Remove Offer
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="mi_text">
                        <div class="message_input">
                            <form id="messageForm" method="post" enctype="multipart/form-data" action="@Url.Action("SendMessage", "Messaging")" class="d-flex flex-column">
                                @Html.AntiForgeryToken()
                                <!-- Passing the receiver and (if applicable) the offer id -->
                                <input type="hidden" name="receiverUserId" value="@Model.OtherUserId" />
                                <input type="hidden" id="replyPreview" name="replyPreview" value="" />
                                <input type="hidden" id="replyMessageId" name="replyMessageId" value="" />
                                @* If messaging relates to an offer, include it as a hidden field *@
                                @if (ViewBag.OfferDetails != null)
                                {
                                    <input type="hidden" name="offerId" value="@((OfferDisplayVM)ViewBag.OfferDetails).OfferId" />
                                }
                                <!-- Preview area for selected attachments -->
                                <div id="filePreview" style="margin-bottom:10px;"></div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div id="errorContainer" style="display:none; color: red; margin-bottom: 10px;"></div>
                                        <div class="input-group">
                                            <!-- File upload icon -->
                                            <div class="input-group-prepend">
                                                <label class="input-group-text" for="fileInput" data-bs-toggle="tooltip" data-bs-placement="top" title="Allowed: Images, PDFs, Code, Archives (Max: 5MB)"
                                                       style="cursor:pointer;background-color:#fff;border:none;">
                                                    <i class="fa fa-paperclip"></i>
                                                </label>
                                            </div>
                                            <div class="col-md-10">
                                                <div class="textarea-with-counter">
                                                    <!-- 2) Full-width textarea with extra padding -->
                                                    <textarea id="messageInput"
                                                              class="form-control"
                                                              placeholder="Type a message…"
                                                              rows="3"></textarea>
                                                    <!-- 3) Overlayed counter -->
                                                    <span id="innerCharCount" class="char-count">0/200</span>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <!-- Send button -->
                                                <div class="input-group-append">
                                                    <button class="btn ud-btn btn-thm" type="submit" style="top:0">
                                                        <i class="fal fa-arrow-right-long"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                        <!-- Payment Warning Container: hidden by default -->
                                        <div id="WarningInfo" style="display:none; background-color: #fff3cd; color: #856404; border: 1px solid #ffeeba; padding: 5px; margin-top: 5px;">
                                            <i class="fa fa-info-circle"></i> Be aware: Payment-related messages may be associated with fraud.
                                        </div>
                                    </div>

                                </div>
                            </form>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .sent {
        padding: 10px;
        border-radius: 5px;
    }

    .reply {
        padding: 10px;
        border-radius: 5px;
        text-align: right;
    }

    .message_input {
        margin-top: 20px;
    }

        .message_input input[type="text"] {
            flex: 1;
        }

    .file-input-custom {
        max-width: 150px;
        position: relative;
        z-index: 2;
        /* Adjust margin as needed */
        margin-right: 10px;
    }

    .card {
        flex-direction: row;
        border: 0;
        box-shadow: 0 7px 7px rgba(0, 0, 0, 0.18);
        margin: 3em auto;
    }

        .card.card.bg-light-subtle .card-title {
            color: dimgrey;
        }

        .card img {
            max-width: 25%;
            margin: auto;
            padding: 0.5em;
            border-radius: 14px;
        }

    .card-body {
        display: flex;
        justify-content: space-between;
    }

    .text-section {
        max-width: 60%;
    }

    .cta-section {
        max-width: 40%;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        justify-content: space-between;
    }

        .cta-section .btn {
            padding: 0.3em 0.5em;
            /* color: #696969; */
        }

    .card.bg-light-subtle .cta-section .btn {
        background-color: #898989;
        border-color: #898989;
    }

    button:disabled,
    button[disabled] {
        cursor: not-allowed;
        opacity: 0.65; /* Optional: to visually indicate disabled state */
    }

    .textarea-with-counter {
        position: relative;
        display: inline-block; /* Shrinks to fit content if you like */
        width: 100%; /* Or whatever width you need */
    }

        /* Ensure textarea fills the wrapper and has room for the counter */
        .textarea-with-counter textarea {
            width: 90%;
            padding-right: 3.5em; /* space for counter on the right */
            box-sizing: border-box; /* include padding in width */
        }

    /* This looks like placeholder text inside */
    .char-count {
        position: absolute;
        bottom: 0.5em; /* adjust to sit just above the bottom padding */
        right: 5em; /* align with the right padding */
        font-size: 0.85em;
        color: rgba(0,0,0,0.4);
        pointer-events: none; /* clicks go through */
        user-select: none;
    }
</style>

@section DynamicScript {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
            $(document).ready(function(){
                // Reply button handler
                $(document).on('click', '.icon-reply', function(){
                    var parentItem = $(this).closest('.message-item');
                    var previewText = parentItem.find('p').text().substring(0, 50);
                    var parentIdStr = parentItem.attr('id');
                    var parentId = parseInt(parentIdStr.split('-')[1], 10);

                    $('#replyPreview').val(previewText);
                    $('#replyMessageId').val(parentId);
                    $('#replyPreviewDisplay').text(previewText);
                    $('#replyPreviewContainer').show();
                    $('#replyPreviewContainer .icon-cancel').show();
                });

                $(document).on('click', '.icon-cancel', function(){
                    $('#replyPreview').val('');
                    $('#replyMessageId').val('');
                    $('#replyPreviewDisplay').text('');
                    $('#replyPreviewContainer').hide();
                    $(this).hide();
                });

                // Trigger file input when clicking the upload icon.
                $('#fileInput').change(function(){
                    var previewContainer = $('#filePreview');
                    previewContainer.empty();
                    var files = this.files;
                    if(files.length > 0){
                        $.each(files, function(index, file){
                            if(file.type.startsWith("image/")){
                                var reader = new FileReader();
                                reader.onload = function(e){
                                    previewContainer.append(
                                        '<div style="display:inline-block; margin-right:81%;">' +
                                        '<img src="' + e.target.result + '" alt="' + file.name + '" style="max-width:100px; border:1px solid #ddd; border-radius:4px;" />' +
                                        '</div>'
                                    );
                                }
                                reader.readAsDataURL(file);
                            } else {
                                previewContainer.append(
                                    '<div style="display:inline-block; margin-right:81%; padding:10px; border:1px solid #ddd; border-radius:4px;">' +
                                    '<i class="fa fa-file"></i> ' + file.name +
                                    '</div>'
                                );
                            }
                        });
                    }
                });

                // Bind form submission once.
                $('#messageForm').off('submit').on('submit', function(e){
                    e.preventDefault();

                    var $submitButton = $(this).find('button[type="submit"]');
                    $submitButton.prop('disabled', true);

                    var formData = new FormData(this);
                    var $form = $(this);
                    $form.find('button[type="submit"]').prop('disabled', true);

                    $.ajax({
                        url: $form.attr('action'),
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        headers: { "X-Requested-With": "XMLHttpRequest" },
                        success: function(result){
                            // Check if result is JSON with an error message.
                            if (result.success === false) {
                                // Instead of alerting, display error message in the error container
                                $('#errorContainer').html(result.error).show();
                            } else {
                                $('#errorContainer').hide().html('');
                                $('#chatContainer').append(result);
                                // 1️⃣ reset only your user‐editable fields, not the entire form
                                $('#messageInput').val('');
                                $('#filePreview').empty();
                                $('#replyPreviewContainer').hide();
                                $('#replyPreview').val('');
                                $('#replyMessageId').val('');

                                // 2️⃣ hide & remove the offer preview AND the hidden input
                                $("#offerPreviewWindow").hide();
                                $("input[name='offerId']").remove();
                                // Update the URL: remove "offerId" parameter while preserving "otherUserId"
                                try {
                                    var currentUrl = new URL(window.location.href);
                                    currentUrl.searchParams.delete("offerId");
                                    // If "otherUserId" is already in the URL, it remains unaffected.
                                    window.history.replaceState({}, document.title, currentUrl.toString());
                                } catch (error) {
                                    console.error("Error updating URL:", error);
                                }
                            }
                            $submitButton.prop('disabled', false);
                        },
                        error: function(xhr, status, error){
                            console.error("Error details:", xhr.responseText);
                            alert('Error sending message');
                            $form.find('button[type="submit"]').prop('disabled', false);
                        }
                    });
                });

                // 1) Load your keywords from the server
                var privacyKeywords = @Html.Raw(
      Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.SensitiveWords ?? new List<string>())
    );

                // 2) Declare the timer variable
                let debounceTimer;

                // 3) Move your existing logic into a function
                function runSensitiveCheck() {
                  var text = $('#messageInput').val().toLowerCase().replace(/\s+/g, '');
                  var warningTriggered = privacyKeywords.some(function(keyword){
                    return text.indexOf(keyword.toLowerCase().replace(/\s+/g,'')) !== -1;
                  });

                  if (warningTriggered) {
                    $('#WarningInfo')
                      .html('<i class="fa fa-info-circle"></i> Warning: Sharing sensitive personal or financial information may compromise your privacy.')
                      .fadeIn();
                  } else {
                    $('#WarningInfo').fadeOut();
                  }
                }

                // 4) Debounced handler
                $('#messageInput').off('keyup')   // unbind old handler if you had one
                                 .on('keyup', function(){
                                   clearTimeout(debounceTimer);
                                   debounceTimer = setTimeout(runSensitiveCheck, 200);
                                 });

                // // Load sensitive words from the server (via ViewBag).
                // var privacyKeywords = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.SensitiveWords ?? new List<string>()));

                // // Monitor keyup events on the message input field.
                // $('#messageInput').on('keyup', function() {
                //     var text = $(this).val().toLowerCase();
                //     // Normalize the input text by removing spaces.
                //     var normalizedText = text.replace(/\s+/g, '');
                //     var warningTriggered = false;

                //     // Log the normalized text.
                //     console.log("Normalized input text:", normalizedText);

                //     // Check if any normalized keyword exists in the normalized text.
                //     privacyKeywords.forEach(function(keyword) {
                //         var normalizedKeyword = keyword.toLowerCase().replace(/\s+/g, '');
                //         console.log("Checking for keyword:", normalizedKeyword);
                //         if (normalizedText.indexOf(normalizedKeyword) !== -1) {
                //             warningTriggered = true;
                //         }
                //     });

                //     // Show or hide the warning accordingly.
                //     if (warningTriggered) {
                //         $('#WarningInfo')
                //             .html('<i class="fa fa-info-circle"></i> Warning: Sharing sensitive personal or financial information may compromise your privacy.')
                //             .fadeIn();
                //     } else {
                //         $('#WarningInfo').fadeOut();
                //     }
                // });

                // Scroll to original message on reply preview click.
                $(document).on('click', '.go-to-parent', function(){
                    var parentId = $(this).data('parent-id');
                    var target = $('#message-' + parentId);
                    var container = $('#chatContainer');
                    if(target.length && container.length){
                        container.animate({
                            scrollTop: container.scrollTop() + target.position().top
                        }, 500);
                    } else {
                        alert('Original message not found.');
                    }
                });
            });
    </script>
    <script>
        $(document).ready(function () {
            // On page load, ensure the URL contains the stored "otherUserId" (if present)
            try {
                const storedOtherUserId = localStorage.getItem("otherUserId");
                if (storedOtherUserId) {
                    const currentUrl = new URL(window.location.href);
                    if (!currentUrl.searchParams.get("otherUserId")) {
                        currentUrl.searchParams.set("otherUserId", storedOtherUserId);
                        window.history.replaceState({}, document.title, currentUrl.toString());
                    }
                }
            } catch (error) {
                console.error("Error restoring URL:", error);
            }

            const urlParams = new URLSearchParams(window.location.search);
            const offerIdParam = urlParams.get("offerId");
            if (offerIdParam) {
                // Update the hidden input field for the offer ID
                $("input[name='offerId']").val(offerIdParam);
                // Show the offer preview window (assumes an element with id "offerPreviewWindow" exists)
                $("#offerPreviewWindow").show();
            }

            // When the user clicks "Remove Offer", hide the offer preview,
            // clear the hidden offer field, and update the URL.
            $("#btnRemoveOfferPreview").on("click", function () {
                // Hide the offer preview window and clear the offer field.
                $("#offerPreviewWindow").hide();
                $("input[name='offerId']").remove();

                try {
                    const currentUrl = new URL(window.location.href);
                    // Preserve the otherUserId from the URL.
                    const otherUserId = currentUrl.searchParams.get("otherUserId");
                    // Remove the offerId parameter.
                    currentUrl.searchParams.delete("offerId");
                    // If otherUserId exists, ensure it remains in the URL.
                    if (otherUserId) {
                        currentUrl.searchParams.set("otherUserId", otherUserId);
                        localStorage.setItem("otherUserId", otherUserId);
                    }
                    // Update the browser's URL without creating a new history entry.
                    window.history.replaceState({}, document.title, currentUrl.toString());
                } catch (error) {
                    console.error("Error updating URL:", error);
                }
            });
        });
    </script>
    <script>
        // Generate (or re-generate) OTPs.
        $(document).on('click', '#showOtpBtn', function () {
            var exchangeId = $(this).data('exchange-id');
            if (!exchangeId) {
                alert("Exchange not found.");
                return;
            }

            // Store the exchange id in the modal (if needed later)
            $('#otpModal').data('exchange-id', exchangeId);
            var token = $('input[name="__RequestVerificationToken"]').val();

            // AJAX call to fetch the OTP generated for the current user
            $.ajax({
                url: '@Url.Action("GetMyMeetingOTP", "ExchangeInPerson")',
                type: 'POST',
                data: { exchangeId: exchangeId },
                headers: { 'RequestVerificationToken': token },
                success: function (data) {
                    if (data.success) {
                        // Set the OTP value in the modal
                        $('#otpValue').text(data.otp);
                        // Open the modal
                        $('#otpModal').modal('show');
                    } else {
                        alert("Error: " + data.error);
                    }
                },
                error: function () {
                    alert("An error occurred while retrieving your OTP.");
                }
            });
        });

        // Verify the OTP provided.
        $(document).on('click', '#verifyOtpBtn', function () {
            var exchangeId = $('#otpModal').data('exchange-id');
            if (!exchangeId) {
                alert("Exchange not found.");
                return;
            }
            var otp = $('#enteredOtp').val();
            if (!otp) {
                alert("Please enter the OTP.");
                return;
            }
            var token = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '@Url.Action("VerifyMeetingByOTP", "ExchangeInPerson")',
                type: 'POST',
                data: { exchangeId: exchangeId, otp: otp },
                headers: { 'RequestVerificationToken': token },
                success: function (data) {
                    if (data.success) {
                        alert(data.message);
                        $('#otpModal').modal('hide');
                        location.reload(); // reload to update verification status
                    } else {
                        alert("Error: " + data.error);
                    }
                },
                error: function () {
                    alert("An error occurred while verifying your OTP.");
                }
            });
        });
    </script>
    <script>
        // References to the HTML elements.
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const captureBtn = document.getElementById('captureBtn');
        const capturedProofInput = document.getElementById('CapturedProof');
        const proofDateTimeInput = document.getElementById('ProofDateTime');
        const proofLocationInput = document.getElementById('ProofLocation');
        const proofPreviewContainer = document.getElementById('proofPreviewContainer');

                function initializeCameraAndLocation(videoEl, captureBtnSelector, proofLocationInput, proofDateTimeInput, previewContainer) {
            // Disable the capture button until camera is ready.
            $(captureBtnSelector).prop('disabled', true);
            // Clear any previous preview image.
            $(previewContainer).empty();

            // Create a promise for camera access.
            let cameraPromise = new Promise((resolve, reject) => {
                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                    navigator.mediaDevices.getUserMedia({ video: true })
                        .then(function (stream) {
                            videoEl.srcObject = stream;
                            videoEl.play();
                            videoEl.onloadedmetadata = function() {
                                $(captureBtnSelector).prop('disabled', false);
                                resolve("Camera OK");
                            };
                        })
                        .catch(function (err) {
                            $(captureBtnSelector).prop('disabled', true);
                            reject("Camera");
                        });
                } else {
                    reject("Camera not supported");
                }
            });

            // Create a promise for location access.
            let locationPromise = new Promise((resolve, reject) => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                        function (position) {
                            proofLocationInput.value = position.coords.latitude + ", " + position.coords.longitude;
                            resolve("Location OK");
                        },
                        function (error) {
                            reject("Location");
                        }
                    );
                } else {
                    reject("Geolocation not supported");
                }
            });

            // Set current date and time.
            proofDateTimeInput.value = new Date().toISOString();

            // Combine the promises and show error messages as needed.
            Promise.allSettled([cameraPromise, locationPromise]).then(results => {
                let cameraError = (results[0].status === "rejected");
                let locationError = (results[1].status === "rejected");

                if (cameraError && locationError) {
                    alert("Unable to access both the camera and your location. Please check your permissions.");
                } else if (cameraError) {
                    alert("Unable to access the camera. Please check your permissions.");
                } else if (locationError) {
                    alert("Unable to access your location. Please check your permissions.");
                }
            });
        }

        // Function to schedule automatic opening of the start proof modal and set up reminders.
        function autoOpenStartProofModal() {
            // Get the scheduled start time from the hidden input.
            const startTimeStr = $('#scheduledTimeInput').val();  // e.g., "2025-04-12T14:22:34.123Z"
            if (!startTimeStr) return;

            const startTime = new Date(startTimeStr);
            const now = new Date();
            let delay = startTime.getTime() - now.getTime();

            // If the scheduled time is in the past, open the modal immediately.
            if (delay < 0) {
                delay = 0;
            }

            // Optional: add a grace period (e.g., 1 minute) after the scheduled start time.
            const gracePeriod = 60000; // 1 minute in milliseconds.
            delay += gracePeriod;

            // Set the modal to auto-open after the calculated delay.
            setTimeout(function() {
                $('#proofModal').modal('show');
            }, delay);

            // Schedule reminder: we'll use 5 minutes (300000 ms) as the reminder interval.
            const reminderDelay = 900000; // 15 minutes in milliseconds

            function checkProofStatus() {
                if (!$('#CapturedProof').val()) {
                    alert("Reminder: It appears that you haven't captured your proof for the meeting scheduled at " +
                          startTime.toLocaleTimeString() +
                          ". Please capture a photo if you haven't already.");
                }
            }

            // First reminder: 5 minutes after the scheduled start time (plus grace period).
            setTimeout(checkProofStatus, delay + reminderDelay);
            // Subsequent reminders every 5 minutes.
            setInterval(checkProofStatus, reminderDelay);
        }

                $(document).ready(function () {
            // Auto-open the start proof modal based on the scheduled time.
            autoOpenStartProofModal();

            // When the start proof modal is shown, initialize the camera and location.
            $('#proofModal').on('shown.bs.modal', function () {
                initializeCameraAndLocation(
                    document.getElementById('video'),
                    '#captureBtn',
                    document.getElementById('ProofLocation'),
                    document.getElementById('ProofDateTime'),
                    '#proofPreviewContainer'
                );
            });

            // Capture button event for start proof.
            $('#captureBtn').on('click', function (event) {
                if ($(this).prop('disabled')) {
                    alert("Camera is not ready yet. Please wait.");
                    event.preventDefault();
                    return;
                }
                const canvasEl = document.getElementById('canvas');
                const videoEl = document.getElementById('video');
                canvasEl.width = videoEl.videoWidth;
                canvasEl.height = videoEl.videoHeight;
                const context = canvasEl.getContext('2d');
                context.drawImage(videoEl, 0, 0, canvasEl.width, canvasEl.height);

                // Create overlay text with current date and location.
                const overlayText = `Date: ${new Date().toLocaleString()}\nLocation: ${document.getElementById('ProofLocation').value || 'N/A'}`;
                context.font = "24px Arial";
                context.fillStyle = "rgba(0, 0, 0, 0.4)";
                context.textAlign = "right";
                const textLines = overlayText.split('\n');
                const lineHeight = 30;
                const padding = 10;
                const textWidth = canvasEl.width * 0.4;
                const textX = canvasEl.width - padding;
                const textY = canvasEl.height - padding - (textLines.length - 1) * lineHeight;
                context.fillRect(textX - textWidth - padding, textY - lineHeight, textWidth + 2 * padding, textLines.length * lineHeight + padding / 2);
                context.fillStyle = "white";
                textLines.forEach((line, index) => {
                    context.fillText(line, textX, textY + index * lineHeight);
                });

                // Convert canvas to a data URL and update the hidden input and preview.
                const dataURL = canvasEl.toDataURL("image/png");
                $('#CapturedProof').val(dataURL);
                $('#proofPreviewContainer').html(`<img src="${dataURL}" alt="Captured Proof" style="max-width: 100%; margin-top: 10px; border-radius: 4px;" />`);

                alert("Start proof photo captured. Please review and submit your proof.");
            });

            // Prevent form submission if no proof was captured.
            $('#proofForm').on('submit', function (e) {
                if (!$('#CapturedProof').val()) {
                    e.preventDefault();
                    alert("It appears that you haven't captured your start proof. Please capture a photo before submitting.");
                    return false;
                }
            });

        });
    </script>
    <script>
        $(function(){
          var $ta = $('#messageInput'),
              $ct = $('#innerCharCount'),
              max = 200;

          function update(){
            var len = $ta.val().length;
            if (len > max) {
              $ta.val($ta.val().slice(0, max));
              len = max;
            }
            $ct.text(len + '/' + max);
          }

          // init
          update();

          // on input
          $ta.on('input', update);
        });
    </script>

    <style>
        .con-profile-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%; /* make them circles */
            object-fit: cover; /* crop to fill without distortion */
            display: inline-block; /* or block/inline-block as needed */
        }
    </style>
    }
