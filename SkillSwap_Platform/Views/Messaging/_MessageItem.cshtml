@model SkillSwap_Platform.Models.ViewModels.MessagesVM.MessageItemVM
@using Humanizer
@using System.Text.RegularExpressions

@{
    var exchange = Model.Exchange ?? new SkillSwap_Platform.Models.TblExchange();
    bool isCurrentUserVerified = false;
    var offer = Model.OfferDetails;

    // Only check if exchange is not null (it should be populated in your controller)
    if (exchange != null && exchange.ExchangeId > 0)
    {
        if (Model.CurrentUserID == exchange.OfferOwnerId)
        {
            isCurrentUserVerified = exchange.IsInpersonMeetingVerifiedByOfferOwner;
        }
        else if (Model.CurrentUserID == exchange.OtherUserId)
        {
            isCurrentUserVerified = exchange.IsInpersonMeetingVerifiedByOtherParty;
        }
    }
    // Calculate the meeting end time if start time and duration are provided.
    DateTime? meetingStart = Model.InPersonMeeting?.MeetingScheduledDateTime;
    double? durationMinutes = Model.InPersonMeeting?.InpersonMeetingDurationMinutes;
    DateTime? meetingEnd = null;
    if (meetingStart.HasValue && durationMinutes.HasValue)
    {
        meetingEnd = meetingStart.Value.AddMinutes(durationMinutes.Value);
    }
    // Determine whether the meeting session has expired.
    bool meetingExpired = meetingEnd.HasValue && DateTime.Now > meetingEnd.Value;
    bool bothVerified = exchange.IsInpersonMeetingVerifiedByOfferOwner && exchange.IsInpersonMeetingVerifiedByOtherParty;

    // Detect whether the message is a meeting card based on a marker in Model.Content.
    bool isMeetingCard = !string.IsNullOrWhiteSpace(Model.Content) &&
    Model.Content.Contains("[MEETING_ID:");

    bool isInPersonMeetNotification = Model.MessageType == "InPersonMeetNotification";
}

<style>
    .offered-skill {
    background: rgba(46, 204, 113, 0.15) !important; /* Green Glass Effect */
    color: #2ecc71 !important;
    border: 1px solid rgba(46, 204, 113, 0.3) !important;
    backdrop-filter: blur(5px);
    }
</style>

<div id="message-@Model.MessageId" class="message-item @(Model.IsSentByCurrent ? "reply" : "sent")" style="margin-bottom:20px;">
    <div class="d-flex align-items-center @(Model.IsSentByCurrent ? "justify-content-end" : "justify-content-start") mb15">
        @if (!Model.IsSentByCurrent)
        {
            <img class="img-fluid rounded-circle align-self-start mr10 msg-profile-avatar"
            src="@(!string.IsNullOrEmpty(Model.SenderProfileImage) ? Url.Content(Model.SenderProfileImage) : Url.Content("~/template_assets/images/No_Profile_img.png"))"
            alt="Profile" />
        }
        <div class="title fz15">
            @if (Model.IsSentByCurrent)
            {
                <small class="mr10">@Model.SentDate.ToLocalTime().Humanize()</small>
                <h6 class="mr10">You</h6>
            }
            else
            {
                <small class="mr10">@Model.SentDate.ToLocalTime().Humanize()</small>
                <h6 class="mr10">@Model.SenderName</h6>
            }
        </div>
        @if (Model.IsSentByCurrent)
        {
            <img class="img-fluid rounded-circle align-self-end ml10 msg-profile-avatar"
            src="@(!string.IsNullOrEmpty(Model.SenderProfileImage) ? Url.Content(Model.SenderProfileImage) : Url.Content("~/template_assets/images/No_Profile_img.png"))"
            alt="Profile" />
        }
    </div>
    @if (!string.IsNullOrEmpty(Model.ReplyPreview) && Model.ReplyMessageId.HasValue)
    {
        <a href="javascript:void(0);" class="go-to-parent" data-parent-id="@Model.ReplyMessageId" style="display:block; border-left: 3px solid #ccc; padding-left:10px; margin-bottom:10px;">
            <small class="line-clamp2">Replying to: "@Model.ReplyPreview"</small>
        </a>
    }
    <div class="message-body" data-message-id="@Model.MessageId" data-message-preview="@Model.Content.Substring(0, Math.Min(Model.Content.Length, 50))">
        @if (Model.Attachments != null && Model.Attachments.Any())
        {
            @Html.Partial("_MessageAttachments", Model.Attachments)
        }
        <div class="message-content" style="@(Model.IsFlagged && !Model.IsApproved ? "opacity: 0.5; border: 1px dashed orange;" : "")">
            @if (Model.IsSentByCurrent)
            {
                @if (!(Model.IsFlagged && !Model.IsApproved))
                {
                    <span class="icon-action icon-reply" title="Reply">
                        <i class="fa fa-reply"></i>
                    </span>
                }
                @* Offer Preview for sent messages *@
                @if (offer != null && !isMeetingCard)
                {
                    <div class="navpill-style1" style="margin-bottom: 10%;">
                        <ul class="nav nav-pills mb30" id="pills-tab" role="tablist">
                            <li class="nav-item">
                                <button class="nav-link active fw500 dark-color">@offer.TokenCost Token</button>
                            </li>
                            <li class="nav-item">
                                @if (Model.SenderUserID == Model.CurrentUserID)
                                {
                                    if (Model.ContractDetails == null)
                                    {
                                        <a href="@Url.Action("Create", "Contract", new { messageId = Model.MessageId })"
                                        class="nav-link fw500 dark-color">
                                            Send Invite <i class="fal fa-arrow-right-long ms-1"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        <p class="nav-link fw500 dark-color text-muted" style="padding:8px;">Agreement invitation sent.</p>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted mb-0" style="padding:8px;">Agreement invitation sent.</p>
                                }
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane fade fz15 text show active">
                                @{
                                    // 1) Use the VM’s PortfolioUrls (already a List<string>)
                                    var portfolioImages = offer.PortfolioUrls ?? new List<string>();

                                    // 2) Define two fallback images
                                    var defaultImages = new[]
                                    {
                        Url.Content("~/template_assets/images/listings/No_Offer_img_1.jpg"),
                        Url.Content("~/template_assets/images/listings/No_Offer_img_2.jpg")
                        };

                                    // 3) Pick one fallback deterministically by OfferId
                                    int idx = offer.OfferId % defaultImages.Length;
                                    var fallbackImage = defaultImages[idx];

                                    // 4) Final src = first portfolio image or fallback
                                    string imgSrc = portfolioImages.Any()
                                    ? Url.Content(portfolioImages.First())
                                    : fallbackImage;
                                }
                                <img src="@imgSrc"
                                class="offer-thumbnail me-3" alt="Offer Thumbnail" style="border-radius:4px;max-width:55%" />
                                <div>
                                    <h5 class="offer-title line-clamp2 mb-1">@offer.Title</h5>
                                    <small class="text-muted d-block mb-1">
                                        <i class="flaticon-sandclock me-1"></i>@offer.TimeCommitmentDays Days
                                    </small>
                                    <small class="text-muted d-block mb-1">
                                        <i class="flaticon-recycle me-1"></i>@offer.AssistanceRounds Assistance
                                    </small>
                                    <small class="text-muted d-block tag-list mb-1">
                                        Offer Skill: <br /> <a href="#!offerskill" class="offered-skill"> @(offer.SkillNames != null ? string.Join(", ", offer.SkillNames) : "")</a>
                                    </small>
                                    <small class="text-muted d-block tag-list mb-1">
                                        Interested in: <br /> <a href="#!willingskill"> @(offer.WillingSkills != null ? string.Join(", ", offer.WillingSkills) : "")</a>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (Model.ContractDetails != null)
                {
                    <div class="contract-card">
                        <div class="contract-header">
                            <h5>📄 Agreement Invitation <span class="version">@("v")@Model.ContractDetails.Version</span></h5>
                        </div>

                        <div class="contract-details">
                            <p><strong>Offered Skill:</strong> @Model.OfferedSkillName</p>
                            <p><strong>Exchange Skill:</strong> @Model.ReceiverSkillName</p>
                            <p><strong>Tokens:</strong> @Model.ContractDetails.TokenOffer</p>
                            <p><strong>Created:</strong> @Model.ContractDetails.CreatedDate.ToLocalTime().ToString("dd MMMM, yyyy")</p>
                            <p>
                                <strong>Status:</strong>
                                <span class="badge badge-@(Model.ContractDetails.Status.ToLower())">
                                    @Model.ContractDetails.Status
                                </span>
                            </p>
                        </div>

                        <div class="contract-actions">
                            <a href="@Url.Action("DownloadPdf", "Contract", new { contractId = Model.ContractDetails.ContractId })"
                            class="btn btn-outline-primary" target="_blank">
                                <i class="fa fa-file-pdf"></i> Download PDF
                            </a>


                            @if ((Model.ContractDetails != null) &&
                          (Model.ContractDetails.Status == "Pending" && Model.CurrentUserID == Model.ContractDetails.ReceiverUserId) ||
                          (Model.ContractDetails.Status == "ModifiedByReceiver" && Model.CurrentUserID == Model.ContractDetails.SenderUserId) ||
                          (Model.ContractDetails.Status == "ModifiedBySender" && Model.CurrentUserID == Model.ContractDetails.ReceiverUserId))
                            {
                                <a href="@Url.Action("Review", "Contract", new { contractId = Model.ContractDetails.ContractId })"
                                class="btn btn-sm btn-primary" style="color:#fff">
                                    <i class="fa fa-eye"></i> Review Agreement
                                </a>

                                <form asp-action="DeclineContract"
                                asp-controller="Contract"
                                method="post"
                                class="d-inline"
                                onsubmit="return confirm('Are you sure you want to decline this agreement?');">
                                    <input type="hidden" name="contractId" value="@Model.ContractDetails.ContractId" />
                                    <button type="submit" class="btn btn-sm btn-danger">
                                        <i class="fa fa-times-circle"></i> Decline Agreement
                                    </button>
                                </form>
                            }
                            else if (Model.IsContractPending && Model.CurrentUserID == Model.ContractDetails.ReceiverUserId)
                            {
                                <a href="@Url.Action("Review", "Contract", new { contractId = Model.ContractDetails.ContractId })"
                                class="btn btn-sm btn-primary" style="color:#fff">
                                    <i class="fa fa-eye"></i> Review Agreement
                                </a>

                                <form asp-action="DeclineContract"
                                asp-controller="Contract"
                                method="post"
                                class="d-inline"
                                onsubmit="return confirm('Are you sure you want to decline this agreement?');">
                                    <input type="hidden" name="contractId" value="@Model.ContractDetails.ContractId" />
                                    <button type="submit" class="btn btn-sm btn-danger">
                                        <i class="fa fa-times-circle"></i> Decline Invite
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                }
                @* Example: Show a custom message divider after the invite card *@
                @if (Model.ContractDetails != null &&
              (Model.ContractDetails.Status.Equals("Accepted", StringComparison.OrdinalIgnoreCase) ||
              Model.ContractDetails.Status.Equals("Expired", StringComparison.OrdinalIgnoreCase) ||
              Model.ContractDetails.Status.Equals("Declined", StringComparison.OrdinalIgnoreCase)))
                {
                    // Define your custom message. For example, you might set it based on the status.
                    var customMessage = Model.ContractDetails.Status switch
                    {
                        "Accepted" => "Your agreement has been accepted",
                        "Expired" => "This agreement has expired",
                        "Declined" => "This agreement has been declined",
                        _ => ""
                    };

                    <div style="display: flex; align-items: center; margin: 20px 0;">
                        <hr style="flex: 1; border: none; border-top: 1px solid #ccc;" />
                        <span style="padding: 0 10px; color: #888; font-weight: 600;">
                            @customMessage
                        </span>
                        <hr style="flex: 1; border: none; border-top: 1px solid #ccc;" />
                    </div>
                }

                @if (isMeetingCard)
                {
                    @Html.Raw(Model.Content)
                }
                else if (Model.MessageType == "InPersonMeetNotification" && Model.Exchange != null)
                {
                    @Html.Raw(Model.Content)
                    <div class="exchange-verification-card">
                        <h5>Exchange Verification</h5>
                        <div class="exchange-verification-info">
                            <strong>Exchange:</strong> @("#")@Model.Exchange.ExchangeId <br />
                            <strong>Exchange Mode:</strong> @(Model.Exchange?.ExchangeMode ?? "N/A") <br />
                            <strong>Date:</strong> @Model.SentDate.ToLocalTime().ToString("dd MMMM, yyyy HH:mm")
                            @if (meetingEnd.HasValue)
                            {
                                <strong>Meeting End Time:</strong> @meetingEnd.Value.ToLocalTime().ToString("dd MMM yyyy, HH:mm") <br />
                            }
                        </div>
                        @if (meetingExpired)
                        {
                            <p class="text-danger">Meeting session expired. OTP verification failed and submission is not allowed.</p>
                            <button id="showOtpBtn" data-exchange-id="@Model.Exchange.ExchangeId"
                            class="ud-btn btn-light-thm mb25 me-4"
                            style="border:none;" disabled>
                                Show OTP (Expired) <i class="fal fa-arrow-right-long"></i>
                            </button>
                        }
                        else
                        {
                            @if (exchange.ExchangeId > 0 && !bothVerified)
                            {
                                <!-- Button to open the OTP modal -->
                                <button id="showOtpBtn" data-exchange-id="@Model.Exchange.ExchangeId" class="ud-btn btn-light-thm mb25 me-4" style="border:none; ">
                                    Show OTP <i class="fal fa-arrow-right-long"></i>
                                </button>
                            }
                            else if (exchange.ExchangeId > 0 && bothVerified)
                            {
                                // find the latest meeting for this exchange
                                var latest = Model.InPersonMeeting;

                                if (latest?.InpersonMeetingVerifiedDate != null)
                                {
                                    <p class="text-success">
                                        Meeting verified on @latest.InpersonMeetingVerifiedDate.Value.ToLocalTime().ToString("g")
                                    </p>
                                }
                            }
                        }

                        @if (!meetingExpired && bothVerified)
                        {
                            <button type="button" class="ud-btn btn-thm2 me-4" data-bs-toggle="modal" data-bs-target="#proofModal">
                                Submit Proof of Meeting <i class="fal fa-arrow-right-long"></i>
                            </button>
                        }
                    </div>

                    <!-- OTP Modal -->
                    <div id="otpModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="otpModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="otpModalLabel">Meeting OTP</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    @if (meetingExpired)
                                    {
                                        <p class="text-danger">The meeting session has expired. OTP submission is no longer allowed.</p>
                                    }
                                    else
                                    {
                                        @if (!isCurrentUserVerified)
                                        {
                                            <p>
                                                Please ask <strong id="opponentName">
                                                    @if (Model.CurrentUserID == Model.Exchange.OfferOwnerId)
                                                    {
                                                        @Model.ExchangeOtherUserName
                                                    }
                                                    else
                                                    {
                                                        @Model.ExchangeOfferOwnerName
                                                    }
                                                </strong> for their OTP, then enter it here to verify the meeting.
                                            </p>
                                            <!-- The OTP value will be set dynamically via AJAX -->
                                            <p>Your Meeting OTP: <strong id="otpValue"></strong></p>
                                            <div class="form-group">
                                                <input type="text" id="enteredOtp" class="form-control" placeholder="Enter OTP to verify">
                                            </div>
                                        }
                                        else
                                        {
                                            <p>You have already verified your OTP. Please share your OTP with <strong>@Model.SenderName</strong> if needed.</p>
                                            <p>Your Meeting OTP: <strong id="otpValue"></strong></p>
                                        }
                                    }
                                </div>
                                <div class="modal-footer">
                                    @if (!isCurrentUserVerified && !meetingExpired)
                                    {
                                        <button type="button" id="verifyOtpBtn" class="ud-btn btn-thm">Verify OTP</button>
                                    }
                                    <button type="button" class="btn" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Camera & Proof Modal for Proof-Of-Meeting -->
                    <input type="hidden" id="scheduledTimeInput" value="@Model.InPersonMeeting.MeetingScheduledDateTime" />
                    <!-- Start Proof Modal -->
                    <div class="modal fade" id="proofModal" tabindex="-1" role="dialog" aria-labelledby="proofModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <form id="proofForm" asp-action="UploadMeetingProof" asp-controller="ExchangeInPerson" method="post" enctype="multipart/form-data">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="proofModalLabel">Capture Proof of Meeting Start</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body text-center">
                                        <!-- Video preview element -->
                                        <video id="video" width="100%" autoplay></video>
                                        <!-- Hidden canvas for snapshot -->
                                        <canvas id="canvas" style="display:none;"></canvas>
                                        <!-- Hidden inputs -->
                                        <input type="hidden" name="ExchangeId" value="@Model.Exchange.ExchangeId" />
                                        <input type="hidden" name="ProofDateTime" id="ProofDateTime" />
                                        <input type="hidden" name="ProofLocation" id="ProofLocation" />
                                        <input type="hidden" name="CapturedProof" id="CapturedProof" />
                                        <!-- Preview container -->
                                        <div id="proofPreviewContainer" style="margin-top: 10px;"></div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" id="captureBtn" class="ud-btn btn-dark">Capture Photo</button>
                                        <button type="submit" class="ud-btn btn-thm">Submit Start Proof</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                }
                else
                {
                    <p>@Model.Content</p>
                    @if (Model.MessageType == "ResourceNotification" && Model.ResourceId.HasValue)
                    {
                        <button onclick="location.href='@Url.Action("List", "ResourceSharing", new { exchangeId = Model.ExchangeId, offerId = Model.OfferId })'" class="ud-btn btn-light-thm" style="border:none;">
                            View <i class="fal fa-arrow-right-long"></i>
                        </button>
                    }
                }
            }
            else
            {
                @* Offer Preview for received messages *@
                @if (offer != null && !isMeetingCard)
                {
                    <div class="navpill-style1" style="margin-bottom: 10%;">
                        <ul class="nav nav-pills mb30" id="pills-tab" role="tablist">
                            <li class="nav-item">
                                <button class="nav-link active fw500 dark-color">@offer.TokenCost Token</button>
                            </li>
                            <li class="nav-item">
                                @if (Model.SenderUserID == Model.CurrentUserID)
                                {
                                    if (Model.ContractDetails == null)
                                    {
                                        <a href="@Url.Action("Create", "Contract", new { messageId = Model.MessageId })"
                                        class="nav-link fw500 dark-color">
                                            Send Invite <i class="fal fa-arrow-right-long ms-1"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        if (Model.ContractDetails != null && !Model.IsSentByCurrent)
                                        {
                                            <p class="nav-link fw500 dark-color text-muted" style="padding:8px;">Agreement invitation received.</p>
                                        }
                                        else
                                        {
                                            <p class="nav-link fw500 dark-color text-muted" style="padding:8px;">Agreement invitation sent.</p>
                                        }
                                    }
                                }
                                else
                                {
                                    if (Model.ContractDetails != null && !Model.IsSentByCurrent)
                                    {
                                        <p class="text-muted mb-0">Agreement invite received.</p>
                                    }
                                }
                            </li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane fade fz15 text show active">
                                @{
                                    // 1) Use the VM’s PortfolioUrls (already a List<string>)
                                    var portfolioImages = offer.PortfolioUrls ?? new List<string>();

                                    // 2) Define two fallback images
                                    var defaultImages = new[]
                                    {
                        Url.Content("~/template_assets/images/listings/No_Offer_img_1.jpg"),
                        Url.Content("~/template_assets/images/listings/No_Offer_img_2.jpg")
                        };

                                    // 3) Pick one fallback deterministically by OfferId
                                    int idx = offer.OfferId % defaultImages.Length;
                                    var fallbackImage = defaultImages[idx];

                                    // 4) Final src = first portfolio image or fallback
                                    string imgSrc = portfolioImages.Any()
                                    ? Url.Content(portfolioImages.First())
                                    : fallbackImage;
                                }   
                                <img src="@imgSrc"
                                class="offer-thumbnail me-3" alt="Offer Thumbnail" style="border-radius:4px;max-width:55%" />
                                <div>
                                    <h5 class="offer-title line-clamp2 mb-1">@offer.Title</h5>
                                    <small class="text-muted d-block mb-1">
                                        <i class="flaticon-sandclock me-1"></i>@offer.TimeCommitmentDays Days
                                    </small>
                                    <small class="text-muted d-block">
                                        <i class="flaticon-recycle me-1"></i>@offer.AssistanceRounds Assistance
                                    </small>
                                    <small class="text-muted d-block tag-list mb-1">
                                        Offer Skill: <br /> <a href="#!offerskill" class="offered-skill"> @(offer.SkillNames != null ? string.Join(", ", offer.SkillNames) : "")</a>
                                    </small>
                                    <small class="text-muted d-block tag-list mb-1">
                                        Interested in: <br /> <a href="#!willingskill"> @(offer.WillingSkills != null ? string.Join(", ", offer.WillingSkills) : "")</a>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (Model.ContractDetails != null)
                {
                    <div class="contract-card">
                        <div class="contract-header">
                            <h5>📄 Agreement Invitation <span class="version">@("v")@Model.ContractDetails.Version</span></h5>
                        </div>

                        <div class="contract-details">
                            <p><strong>Offered Skill:</strong> @Model.OfferedSkillName</p>
                            <p><strong>Exchange Skill:</strong> @Model.ReceiverSkillName</p>
                            <p><strong>Tokens:</strong> @Model.ContractDetails.TokenOffer</p>
                            <p><strong>Created:</strong> @Model.ContractDetails.CreatedDate.ToLocalTime().ToString("dd MMMM, yyyy")</p>
                            <p>
                                <strong>Status:</strong>
                                <span class="badge badge-@(Model.ContractDetails.Status.ToLower())">
                                    @Model.ContractDetails.Status
                                </span>
                            </p>
                        </div>

                        <div class="contract-actions">
                            <a href="@Url.Action("DownloadPdf", "Contract", new { contractId = Model.ContractDetails.ContractId })"
                            class="btn btn-outline-primary" target="_blank">
                                <i class="fa fa-file-pdf"></i> Download PDF
                            </a>

                            @if ((Model.ContractDetails.Status == "Pending" && Model.CurrentUserID == Model.ContractDetails.ReceiverUserId) ||
                          (Model.ContractDetails.Status == "ModifiedByReceiver" && Model.CurrentUserID == Model.ContractDetails.SenderUserId) ||
                          (Model.ContractDetails.Status == "ModifiedBySender" && Model.CurrentUserID == Model.ContractDetails.ReceiverUserId))
                            {
                                <a href="@Url.Action("Review", "Contract", new { contractId = Model.ContractDetails.ContractId })"
                                class="btn btn-sm btn-primary" style="color:#fff">
                                    <i class="fa fa-eye"></i> Review Agreement
                                </a>

                                <form asp-action="DeclineContract"
                                asp-controller="Contract"
                                method="post"
                                class="d-inline"
                                onsubmit="return confirm('Are you sure you want to decline this agreement?');">
                                    <input type="hidden" name="contractId" value="@Model.ContractDetails.ContractId" />
                                    <button type="submit" class="btn btn-sm btn-danger">
                                        <i class="fa fa-times-circle"></i> Decline Agreement
                                    </button>
                                </form>
                            }
                            else if (Model.IsContractPending && Model.CurrentUserID == Model.ContractDetails.ReceiverUserId)
                            {
                                <a href="@Url.Action("Review", "Contract", new { contractId = Model.ContractDetails.ContractId })"
                                class="btn btn-sm btn-primary" style="color:#fff">
                                    <i class="fa fa-eye"></i> Review Agreement
                                </a>

                                <form asp-action="DeclineContract"
                                asp-controller="Contract"
                                method="post"
                                class="d-inline"
                                onsubmit="return confirm('Are you sure you want to decline this contract?');">
                                    <input type="hidden" name="contractId" value="@Model.ContractDetails.ContractId" />
                                    <button type="submit" class="btn btn-sm btn-danger">
                                        <i class="fa fa-times-circle"></i> Decline Invite
                                    </button>
                                </form>
                            }
                        </div>
                    </div>
                }
                @* Example: Show a custom message divider after the invite card *@
                @if (Model.ContractDetails != null &&
              (Model.ContractDetails.Status.Equals("Accepted", StringComparison.OrdinalIgnoreCase) ||
              Model.ContractDetails.Status.Equals("Expired", StringComparison.OrdinalIgnoreCase) ||
              Model.ContractDetails.Status.Equals("Declined", StringComparison.OrdinalIgnoreCase)))
                {
                    // Define your custom message. For example, you might set it based on the status.
                    var customMessage = Model.ContractDetails.Status switch
                    {
                        "Accepted" => "Your agreement has been accepted",
                        "Expired" => "This agreement has expired",
                        "Declined" => "This agreement has been declined",
                        _ => ""
                    };

                    <div style="display: flex; align-items: center; margin: 20px 0;">
                        <hr style="flex: 1; border: none; border-top: 1px solid #ccc;" />
                        <span style="padding: 0 10px; color: #888; font-weight: 600;">
                            @customMessage
                        </span>
                        <hr style="flex: 1; border: none; border-top: 1px solid #ccc;" />
                    </div>
                }

                @if (isMeetingCard)
                {
                    @Html.Raw(Model.Content)
                }
                else if (Model.MessageType == "InPersonMeetNotification" && Model.Exchange != null)
                {
                    @Html.Raw(Model.Content)
                    <div class="exchange-verification-card">
                        <h5>Exchange Verification</h5>
                        <div class="exchange-verification-info">
                            <strong>Exchange:</strong> @("#")@Model.Exchange.ExchangeId <br />
                            <strong>Exchange Mode:</strong> @(Model.Exchange?.ExchangeMode ?? "N/A") <br />
                            <strong>Date:</strong> @Model.SentDate.ToLocalTime().ToString("dd MMMM, yyyy HH:mm")
                            @if (meetingEnd.HasValue)
                            {
                                <strong>Meeting End Time:</strong> @meetingEnd.Value.ToLocalTime().ToString("dd MMM yyyy, HH:mm") <br />
                            }
                        </div>
                        @if (meetingExpired)
                        {
                            <p class="text-danger">Meeting session expired. OTP verification failed and submission is not allowed.</p>
                            <button id="showOtpBtn" data-exchange-id="@Model.Exchange.ExchangeId"
                            class="ud-btn btn-light-thm mb25 me-4"
                            style="border:none;" disabled>
                                Show OTP (Expired) <i class="fal fa-arrow-right-long"></i>
                            </button>
                        }
                        else
                        {
                            @if (exchange.ExchangeId > 0 && !bothVerified)
                            {
                                <!-- Button to open the OTP modal -->
                                <button id="showOtpBtn" data-exchange-id="@Model.Exchange.ExchangeId" class="ud-btn btn-light-thm mb25 me-4" style="border:none; ">
                                    Show OTP <i class="fal fa-arrow-right-long"></i>
                                </button>
                            }
                            else if (exchange.ExchangeId > 0 && bothVerified)
                            {
                                <p class="text-success">
                                    Meeting verified on @Model.InPersonMeeting.InpersonMeetingVerifiedDate?.ToLocalTime().ToString("g")
                                </p>
                            }
                        }

                        @if (!meetingExpired && bothVerified)
                        {
                            <button type="button" class="ud-btn btn-thm2 me-4" data-bs-toggle="modal" data-bs-target="#proofModal">
                                Submit Proof of Meeting <i class="fal fa-arrow-right-long"></i>
                            </button>
                        }
                    </div>

                    <!-- OTP Modal -->
                    <div id="otpModal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="otpModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="otpModalLabel">Meeting OTP</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    @if (meetingExpired)
                                    {
                                        <p class="text-danger">The meeting session has expired. OTP submission is no longer allowed.</p>
                                    }
                                    else
                                    {
                                        @if (!isCurrentUserVerified)
                                        {
                                            <p>
                                                Please ask <strong id="opponentName">
                                                    @if (Model.CurrentUserID == Model.Exchange.OfferOwnerId)
                                                    {
                                                        @Model.ExchangeOtherUserName
                                                    }
                                                    else
                                                    {
                                                        @Model.ExchangeOfferOwnerName
                                                    }
                                                </strong> for their OTP, then enter it here to verify the meeting.
                                            </p>
                                            <!-- The OTP value will be set dynamically via AJAX -->
                                            <p>Your Meeting OTP: <strong id="otpValue"></strong></p>
                                            <div class="form-group">
                                                <input type="text" id="enteredOtp" class="form-control" placeholder="Enter OTP to verify">
                                            </div>
                                        }
                                        else
                                        {
                                            <p>You have already verified your OTP. Please share your OTP with <strong>@Model.SenderName</strong> if needed.</p>
                                            <p>Your Meeting OTP: <strong id="otpValue"></strong></p>
                                        }
                                    }
                                </div>
                                <div class="modal-footer">
                                    @if (!isCurrentUserVerified && !meetingExpired)
                                    {
                                        <button type="button" id="verifyOtpBtn" class="ud-btn btn-thm">Verify OTP</button>
                                    }
                                    <button type="button" class="btn" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Camera & Proof Modal for Proof-Of-Meeting -->
                    <input type="hidden" id="scheduledTimeInput" value="@Model.InPersonMeeting.MeetingScheduledDateTime" />
                    <!-- Start Proof Modal -->
                    <div class="modal fade" id="proofModal" tabindex="-1" role="dialog" aria-labelledby="proofModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <form id="proofForm" asp-action="UploadMeetingProof" asp-controller="ExchangeInPerson" method="post" enctype="multipart/form-data">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="proofModalLabel">Capture Proof of Meeting Start</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body text-center">
                                        <!-- Video preview element -->
                                        <video id="video" width="100%" autoplay></video>
                                        <!-- Hidden canvas for snapshot -->
                                        <canvas id="canvas" style="display:none;"></canvas>
                                        <!-- Hidden inputs -->
                                        <input type="hidden" name="ExchangeId" value="@Model.Exchange.ExchangeId" />
                                        <input type="hidden" name="ProofDateTime" id="ProofDateTime" />
                                        <input type="hidden" name="ProofLocation" id="ProofLocation" />
                                        <input type="hidden" name="CapturedProof" id="CapturedProof" />
                                        <!-- Preview container -->
                                        <div id="proofPreviewContainer" style="margin-top: 10px;"></div>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" id="captureBtn" class="ud-btn btn-dark">Capture Photo</button>
                                        <button type="submit" class="ud-btn btn-thm">Submit Start Proof</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                }
                else
                {
                    <p>@Model.Content</p>
                    @* Only render the plain text when this is not a meeting card *@
                    @if (Model.MessageType == "ResourceNotification" && Model.ResourceId.HasValue)
                    {
                        <br />
                        <button onclick="location.href='@Url.Action("List", "ResourceSharing", new { exchangeId = Model.ExchangeId, offerId = Model.OfferId })'" class="ud-btn btn-light-thm" style="border:none;">
                            View <i class="fal fa-arrow-right-long"></i>
                        </button>
                    }
                }
                @if (!(Model.IsFlagged && !Model.IsApproved))
                {
                    <span class="icon-action icon-reply" title="Reply">
                        <i class="fa fa-reply"></i>
                    </span>
                }
            }
        </div>

    </div>
    <!-- Payment warning: if message content contains "pay" or "payment" -->
    @if (Model.Content.ToLower().Contains("pay") || Model.Content.ToLower().Contains("payment"))
    {
        <div class="payment-warning" style="background-color: #fff3cd; color: #856404; font-size:0.8em; border: 1px solid #ffeeba; padding: 5px; margin-top: 5px;">
            <i class="fa fa-info-circle"></i> Be aware: Payment-related messages may be associated with fraud.
        </div>
    }
    @if (Model.IsSentByCurrent)
    {
        <div class="read-receipt" style="text-align:right; font-size:0.8em; color:gray;">
            @if (Model.IsFlagged && !Model.IsApproved)
            {
                <span style="color: orange; font-style: italic;">
                    <i class="fa fa-exclamation-triangle me-1"></i><strong>Your message is pending approval.</strong><br />
                    It will appear once reviewed, so long as it doesn’t violate our guidelines.
                </span>
            }
            else
            {
                <span>@(Model.IsRead ? "Seen" : "Delivered")</span>
            }
        </div>
    }
</div>
<style>
    .contract-card {
        background: #f9f9f9;
        border: 1px solid #dedede;
        border-radius: 12px;
        padding: 20px;
        max-width: 600px;
        box-shadow: 0 8px 18px rgba(0, 0, 0, 0.05);
        margin-bottom: 25px;
        font-family: 'Segoe UI', sans-serif;
    }

    .contract-header {
        border-bottom: 1px dashed #ccc;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }

        .contract-header h5 {
            margin: 0;
            font-weight: 600;
            font-size: 18px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .contract-header .version {
            background-color: #eef1f5;
            color: #333;
            font-size: 13px;
            padding: 3px 8px;
            border-radius: 8px;
        }

    .contract-details p {
        margin: 4px 0;
        font-size: 14px;
    }

    .badge {
        padding: 4px 8px;
        font-size: 13px;
        border-radius: 6px;
        color: white;
    }

    .contract-actions {
        margin-top: 15px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

        .contract-actions .btn {
            padding: 6px 12px;
            font-size: 14px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

    .btn-outline-primary {
        background: white;
        border: 1px solid #007bff;
        color: #007bff;
    }

        .btn-outline-primary:hover {
            background: #007bff;
            color: white;
        }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            color: #fff;
            background-color: #218838;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            color: #fff;
            background-color: #c82333;
        }

    .btn-warning {
        background-color: #ffc107;
        color: #212529;
    }

        .btn-warning:hover {
            color: #111;
            background-color: #e0a800;
        }

    /* Container for the text content */
    .message-content {
        padding: 10px;
        border-radius: 4px;
    }

        /* Styling the paragraph inside message-content */
        .message-content p {
            padding: 12px;
            border-radius: 4px;
            display: inline-block;
            max-width: 70%;
            word-wrap: break-word;
        }

    /* Alignment and color for messages sent by the current user */
    .reply .message-content {
        text-align: right;
    }

        .reply .message-content p {
            background-color: rgba(91, 187, 123, 0.05);
            color: #5BBB7B;
        }

    /* Alignment and color for messages received from the other user */
    .sent .message-content {
        text-align: left;
    }

        .sent .message-content p {
            background-color: #F1FCFA;
            color: #222;
        }

    /* Styling for the Exchange Verification card */
    .exchange-verification-card {
        border: 1px solid #007bff;
        background: #f2f9ff;
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
        max-width: 500px;
    }

        .exchange-verification-card h5 {
            margin-bottom: 10px;
            color: #007bff;
        }

    .exchange-verification-info {
        font-size: 14px;
        margin-bottom: 15px;
    }
    /* OTP Section Styling */
    #otpSection {
        margin-top: 15px;
    }
    /* Proof of Meeting Section */
    .proof-upload-section {
        margin-top: 20px;
        border: 1px solid #28a745;
        background: #e8f5e9;
        padding: 15px;
        border-radius: 8px;
        max-width: 500px;
    }

        .proof-upload-section label {
            font-weight: bold;
        }

    .proof-preview {
        margin-top: 10px;
        max-width: 200px;
    }

    /* Icon action styling */
    .icon-action {
        cursor: pointer;
        display: inline-block;
        margin: 0 5px;
        padding: 0;
        color: inherit;
    }

        .icon-action:hover {
            opacity: 0.8;
        }

    .badge-accepted {
        background: #28a745;
    }

    .badge-pending {
        background: #ffc107;
    }

    .badge-Expired {
        background: #dc3545;
    }

    .badge-declined {
        background: #dc3545;
    }

    .badge-modifiedbyreceiver {
        background: #5bc0de;
    }

    .badge-modifiedbysender {
        background: #5bc0de;
    }

    .msg-profile-avatar {
        width: 60px;
        height: 60px;
        object-fit: cover; /* crop to fill without distortion */
        display: inline-block; /* or block/inline-block as needed */
    }
</style>