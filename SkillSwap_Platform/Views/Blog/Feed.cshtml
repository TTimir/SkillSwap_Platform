@model SkillSwap_Platform.Services.Blogs.BlogFeedVm

@{
    ViewData["Title"] = "News & Tips Posts";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var selectedTag = Model.SelectedTag;
}

<!-- Breadcrumb nav -->
<section class="breadcumb-section">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcumb-style1">
                    <div class="breadcumb-list">
                        <a href="@Url.Action("Index", "Home")">Home</a>
                        <a>Discover</a>
                        <a>News & Tips</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Hero CTA -->
<section class="breadcumb-section pt-0">
    <div class="cta-about-v1 mx-auto maxw1700 pt120 pb120 bdrs16 position-relative overflow-hidden d-flex align-items-center mx20-lg">
        <div class="container">
            <div class="row">
                <div class="col-xl-5">
                    <div class="position-relative">
                        <h2 class="text-white">Swapo Insights</h2>
                        <p class="text-white mb-0">Learn tips, trends and news to level up your skill-swapping game.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Blog Section Area -->
<section class="our-blog pt40">
    <div class="container">
        <div class="row wow fadeInUp" data-wow-delay="300ms">
            <!-- Left: infinite-scroll feed -->
            <div class="col-lg-8">
                <div id="feed" class="row gx-4 gy-5">
                    @* cards injected by script *@
                </div>

                <div id="loading" class="text-center my-4" style="display:none;">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading…</span>
                    </div>
                </div>
                <div id="endOfFeed" class="alert alert-secondary text-center mt20" style="display:none;">
                    You’ve reached the end.
                </div>
            </div>

            @{
                var page = Model.Page;
                var totalPages = Model.TotalPages;
            }
            @if (totalPages > 1)
            {
                <div class="mbp_pagination text-center mt30">
                    <ul class="page_navigation">
                        <!-- Previous -->
                        <li class="page-item @(page == 1 ? "disabled" : "")">
                            <a class="page-link"
                               asp-action="Feed"
                               asp-route-tag="@(Model.SelectedTag)"
                               asp-route-page="@(page - 1)">
                                <span class="fas fa-angle-left"></span>
                            </a>
                        </li>

                        <!-- Page links -->
                        @for (int p = 1; p <= totalPages; p++)
                        {
                            <li class="page-item @(p == page ? "active" : "")">
                                <a class="page-link"
                                   asp-action="Feed"
                                   asp-route-tag="@(Model.SelectedTag)"
                                   asp-route-page="@p">@p</a>
                            </li>
                        }

                        <!-- Next -->
                        <li class="page-item @(page == totalPages ? "disabled" : "")">
                            <a class="page-link"
                               asp-action="Feed"
                               asp-route-tag="@(Model.SelectedTag)"
                               asp-route-page="@(page + 1)">
                                <span class="fas fa-angle-right"></span>
                            </a>
                        </li>
                    </ul>
                    <p class="mt10 mb-0 pagination_page_count text-center">
                        Page @(page) of @totalPages
                    </p>
                </div>
            }

            <!-- Right: sidebar -->
            <div class="col-lg-4">
                <div class="blog-sidebar ms-lg-auto">
                    <div class="sidebar-widget mb30">
                        <h4 class="widget-title">Recent Posts</h4>
                        @foreach (var post in Model.RecentPosts)
                        {
                            <!-- Recent Posts -->
                            <div id="recentPosts" class="mt30">
                                @* You can fetch & render recent posts here or via AJAX *@
                                <div class="list-news-style d-flex align-items-center mb20">
                                    <div class="news-img flex-shrink-0">
                                        <img src="@Url.Content(
                                              string.IsNullOrWhiteSpace(post.CoverImagePath)
                                              ? "~/template_assets/images/default-blog.jpg"
                                              : $"~/{post.CoverImagePath.TrimStart('/')}"
                                            )"
                                             alt="@post.Title"
                                             class="bdrs4" style="max-width:100%; width:100px;" />
                                    </div>
                                    <div class="news-content flex-shrink-1 ms-3">
                                        <h6 class="new-text mb0">
                                            <a href="@Url.Action("Details","Blog", new { id = post.Id })"
                                               class="text-decoration-none text-dark">
                                                @post.Title
                                            </a>
                                        </h6>
                                        <a class="body-light-color">
                                            @post.CreatedAt.ToString("MMMM d, yyyy")
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <!-- Tags -->
                    <div class="sidebar-widget mb30 pb20">
                        <h4 class="widget-title">Tags</h4>
                        <div class="tag-list mt30">
                            @foreach (var (Tag, Count) in Model.TopTags)
                            {
                                var isActive = Tag == selectedTag ? "text-thm3 fw-bold" : "";
                                <a class="@isActive"
                                   href="@Url.Action("Feed","Blog", new { tag = Tag })">
                                    @("#")@Tag @* (@Count) *@
                                </a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        const defaultAvatarUrl = '@Url.Content("~/template_assets/images/SS-Dark.png")';
        const selectedTag = '@(selectedTag ?? "")';

        (async function(){
          let page = 1, loading = false, end = false;
          const feed      = document.getElementById('feed'),
                loadingEl = document.getElementById('loading'),
                endEl     = document.getElementById('endOfFeed');

          function escapeHtml(str) {
            return str.replace(/[&<>"']/g, c =>
              ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
          }

          async function loadPage() {
            if (loading || end) return;
            loading = true;
            loadingEl.style.display = 'block';
            try {
              const url = new URL(`/Blog/FeedData`, window.location.origin);
              url.searchParams.set('page', page);
              if (selectedTag) {
                url.searchParams.set('tag', selectedTag);
              }

              const res = await fetch(url.toString());
              if (!res.ok) throw new Error(`HTTP ${res.status}`);
              const items = await res.json();
              if (items.length === 0) {
                end = true;
                endEl.style.display = 'block';
              } else {
                items.forEach(it => {
                  const col = document.createElement('div');
                  col.className = 'col-sm-12 mb-4';

                  const title   = escapeHtml(it.title);
                  const summary = escapeHtml(it.summary).slice(0, 120) + '…';
                  const date    = new Date(it.createdAt).toLocaleDateString(undefined, {
                    month: 'short', day: 'numeric', year: 'numeric'
                  });
                  const imgUrl  = it.coverImageUrl || '/images/blog-placeholder.png';
                  const author  = escapeHtml(it.authorName || 'Swapo Team');

                  col.innerHTML = `
                    <div class="blog-style1 large-size">
                      <div class="blog-img mb-3"><img class="w-100 bdrs4" src="${imgUrl}" alt="${title}"></div>
                      <div class="blog-content px-0 pt20 pb0">
                        <div class="blog-single-meta mb15">
                          <div class="post-author d-sm-flex align-items-center">
                            <img class="mr10 bdrs50" src="${defaultAvatarUrl}" width="32" height="32" alt="${author}">
                            <a class="pr15 body-light-color" href="#">${author}</a>
                            <a class="ml15 body-light-color" href="#">${date}</a>
                          </div>
                        </div>
                        <h3 class="title mt-1 mb10"><a href="${it.url}">${title}</a></h3>
                        <p class="text mb15">${summary}</p>
                        <a href="${it.url}" class="ud-btn btn-light-thm">Read More<i class="fal fa-arrow-right-long ms-2"></i></a>
                      </div>
                    </div>`;
                  feed.appendChild(col);
                });
                page++;
              }
            } catch {
              console.error('Failed to load more posts');
            } finally {
              loading = false;
              loadingEl.style.display = 'none';
            }
          }

          // initial load + infinite scroll
          await loadPage();
          window.addEventListener('scroll', () => {
            if (window.innerHeight + window.scrollY + 200 >= document.body.offsetHeight) {
              loadPage();
            }
          });
        })();
    </script>
}