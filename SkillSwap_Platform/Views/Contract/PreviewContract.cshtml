@model SkillSwap_Platform.Models.ViewModels.ContractCreationVM

@{
    ViewData["Title"] = "Contract Preview";
    Model.IsPreview = true;
    Layout = null;
    var allowEdit = Model.Mode == "Review";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
            padding: 20px;
            position: relative;
        }

        .contract-document {
            margin: 2em auto;
            max-width: 800px;
            padding: 2em;
            border: 1px solid #ccc;
            background-color: #fafafa;
            line-height: 1.6;
            position: relative;
            z-index: 1;
        }

            .contract-document h2 {
                text-align: center;
                margin-bottom: 1.5em;
            }

        .inline-input {
            border: none;
            border-bottom: 1px dotted #333;
            font-weight: bold;
            padding: 0 5px;
            background: transparent;
            width: auto;
            min-width: 150px;
        }

            .inline-input:focus {
                outline: none;
                border-bottom-color: #007bff;
            }

        .display-field {
            display: inline-block;
            width: auto;
            word-wrap: break-word;
            white-space: normal;
        }

        .contract-actions {
            margin-top: 2em;
            text-align: center;
        }

            .contract-actions button {
                margin: 0 10px;
            }

        #bulletContainer ul {
            list-style-type: disc;
            padding-left: 20px;
        }

        #bulletContainer li {
            margin-bottom: 5px;
            display: flex;
            align-items: center;
        }

        #bulletContainer .bullet-point {
            width: 90%;
            border: none;
            border-bottom: 1px dotted #333;
            background: transparent;
            font-weight: bold;
        }

            #bulletContainer .bullet-point:focus {
                outline: none;
                border-bottom-color: #007bff;
            }

        #bulletContainer .remove-icon {
            cursor: pointer;
            color: red;
            font-size: 16px;
            margin-left: 10px;
        }

        #addMoreBtn {
            margin-top: 10px;
        }

        .watermark {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(-45deg);
            font-size: 3em;
            color: rgba(0, 0, 0, 0.08);
            pointer-events: none;
            z-index: 1000;
            text-align: center;
            white-space: pre-line;
        }

        .contract-actions {
            margin-top: 2em;
            text-align: center;
            display: flex;
            justify-content: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #842029;
            border: 1px solid #f5c2c7;
            padding: 1rem;
            border-radius: 5px;
        }

            .alert-danger ul {
                margin: 0;
                padding-left: 20px;
            }
    </style>
</head>
<body>
    @{
        var watermarkText = Model.Status switch
        {
            "Pending" => "DRAFT – Awaiting Signature",
            "Accepted" => "Digitally Signed and Verified by SkillSwap",
            _ => "PREVIEW ONLY – Not Yet Signed"
        };
    }
    <div class="watermark">@watermarkText</div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger" style="max-width:800px; margin: 0 auto 20px auto;">
            <ul>
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <div>
        @await Html.PartialAsync("_ContractTemplate", Model)
    </div>

    <div class="contract-actions">
        @if (Model.Status == "Pending" && !Model.ReceiverAgreementAccepted)
        {
            @if (Model.Mode == "Edit" && Model.ActionContext == "ModifyOnly")
            {
                <!-- Only show confirm submit -->
                <form asp-action="ModifyContractAndSend" method="post" onsubmit="return validateAndSubmitModify(event)">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.ContractId)
                    <input type="hidden" id="flowDescriptionField" name="flowDescription" />
                    <input type="hidden" id="additionalTermsField" name="additionalTerms" />
                    <input type="hidden" id="receiverPlaceField" name="receiverPlace" value="@Model.ReceiverPlace" />
                    <input type="hidden" name="receiverSignature" id="receiverSignatureField" />
                    <input type="hidden" name="receiverAcceptanceDate" id="receiverAcceptanceDateField" />
                    <input type="hidden" name="receiverAgreementAccepted" id="receiverAgreementAcceptedField" />
                    <button id="confirmButton" type="submit" class="btn btn-primary">Confirm and Send Back</button>
                </form>
            }
            else
            {
                <!-- Show default Modify & Send and Sign options -->
                <form asp-action="ModifyContractAndSend" method="get">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.ContractId)
                    @Html.Hidden("Mode", "Review")
                    <button type="submit" class="btn btn-warning">Modify & Send</button>
                </form>

                @using (Html.BeginForm("SignContract", "Contract", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("ContractId", Model.ContractId)
                    @Html.Hidden("Mode", "Sign")
                    <button type="submit" class="btn btn-success mt-2">Sign Document</button>
                }
            }
        }
    </div>
    
    @if (Model.Mode == "Edit")
    {
        <script>
            function showErrorModal(errors) {
                alert(errors.join("\n"));
            }

            document.addEventListener("DOMContentLoaded", function () {
                try {
                    const errorBox = document.querySelector(".alert-danger");
                    if (errorBox) {
                        errorBox.scrollIntoView({ behavior: "smooth", block: "center" });
                    }

                    const checkbox = document.getElementById("receiverAgreementCheckbox");
                    const confirmBtn = document.getElementById("confirmButton");

                    if (checkbox && confirmBtn) {
                        confirmBtn.disabled = !checkbox.checked;

                        checkbox.addEventListener("change", function () {
                            confirmBtn.disabled = !checkbox.checked;
                        });
                    }

                    const addMoreBtn = document.getElementById("addMoreBtn");
                    if (addMoreBtn) {
                        addMoreBtn.addEventListener("click", function () {
                            const container = document.querySelector("#bulletContainer ul");
                            const count = container.querySelectorAll("li").length;
                            const max = 7;
                            if (count < max) {
                                const li = document.createElement("li");
                                const input = document.createElement("input");
                                input.type = "text";
                                input.className = "bullet-point";
                                input.placeholder = `Step ${count + 1}`;
                                li.appendChild(input);
                                if (count >= 3) {
                                    const remove = document.createElement("span");
                                    remove.className = "remove-icon";
                                    remove.innerHTML = "&#10006;";
                                    remove.onclick = () => {
                                        li.remove();
                                        updatePlaceholders();
                                    };
                                    li.appendChild(remove);
                                }
                                container.appendChild(li);
                            } else {
                                showErrorModal([`You cannot add more than ${max} steps.`]);
                            }
                        });
                    }

                    function updatePlaceholders() {
                        document.querySelectorAll("#bulletContainer ul li").forEach((li, i) => {
                            const input = li.querySelector("input.bullet-point");
                            if (input) input.placeholder = `Step ${i + 1}`;
                        });
                    }
                } catch (ex) {
                    console.error("Flow Initialization Error:", ex);
                }
            });

            function validateAndSubmitModify(e) {
                try {
                    const errors = [];
                    const steps = [];
                    let hasEmpty = false;
                    document.querySelectorAll(".bullet-point").forEach(input => {
                        const val = input.value.trim();
                        if (!val) {
                            hasEmpty = true;
                        } else {
                            steps.push(val);
                        }
                    });

                    if (steps.length < 3) {
                        errors.push("To create an impactful flow, please add at least 3 steps.");
                    }

                    if (hasEmpty) {
                        errors.push("Please fill in all the step fields or remove any empty ones.");
                    }

                    // Helper functions to detect placeholder-like values.
                    function isPlaceholderSignature(value) {
                        // Matches variations like "[Sign Here]", "sign here", "[ sign here", etc.
                        const regex = /^\[?\s*sign\s+here\s*\]?$/i;
                        return regex.test(value);
                    }

                    // SIGNATURE
                    const sig = document.querySelector("input[name='ReceiverSignature']");
                    if (!sig || sig.value.trim() === "" || isPlaceholderSignature(sig.value.trim())) {
                        errors.push("Please provide your actual signature.");
                    }

                    function isPlaceholderPlace(value) {
                        // Matches variations like "[Place of Sign]", "place of sign", "[ place of sign", etc.
                        const regex = /^\[?\s*place\s+of\s+sign\s*\]?$/i;
                        return regex.test(value);
                    }

                    // PLACE
                    const place = document.querySelector("input[name='ReceiverPlace']");
                    if (!place || place.value.trim() === "" || isPlaceholderPlace(place.value.trim())) {
                        errors.push("Please provide the actual place of signing.");
                    }

                    // DATE
                    const date = document.querySelector("input[name='ReceiverAcceptanceDate']");
                    const today = new Date().toISOString().split("T")[0];
                    if (!date || date.value !== today) {
                        errors.push("Acceptance Date must be today's date.");
                    }

                    // AGREEMENT CHECKED
                    const agree = document.getElementById("receiverAgreementCheckbox");
                    if (!agree || !agree.checked) {
                        errors.push("Please check 'I Agree' before proceeding.");
                    }

                    // Show errors if any
                    if (errors.length > 0) {
                        alert(errors.join("\n"));
                        e.preventDefault();
                        return false;
                    }

                    const updatedFlow = steps.join("\n");
                    console.log("Updated Flow Description:", updatedFlow);
                    document.getElementById("flowDescriptionField").value = updatedFlow;
                    const termsInput = document.querySelector("textarea[name='AdditionalTerms']");
                    if (termsInput) {
                        document.getElementById("additionalTermsField").value = termsInput.value.trim();
                    }
                    document.getElementById("receiverPlaceField").value = place.value.trim();
                    document.getElementById("receiverSignatureField").value = sig.value.trim();
                    document.getElementById("receiverAcceptanceDateField").value = date.value;
                    document.getElementById("receiverAgreementAcceptedField").value = agree.checked ? "true" : "false";

                    return true;
                } catch (err) {
                    alert("Unexpected error during validation. Please try again.");
                    e.preventDefault();
                    return false;
                }
            }
        </script>
    }
</body>
</html>